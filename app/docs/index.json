[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/App.js",
    "content": "import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\n// Prøver å lage navbar\r\nimport NavComponent from './components/navbar/navbar';\r\n\r\n// Firebase\r\nimport database, {firebaseApp} from './database';\r\n\r\n// React Router\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\n\r\n//Pages\r\nimport BandBooking from './pages/bandbooking';\r\nimport BandBookingResponsible from './pages/bandbookingresponsible';\r\nimport BandDatabase from './pages/banddatabase';\r\nimport PriceCalculator from './pages/pricecalculator';\r\nimport ConcertPage from './pages/concertpage';\r\nimport Artists from './pages/artists';\r\nimport ManagerSite from './pages/manager_site'\r\nimport AdminPage from './pages/adminpage';\r\nimport Search from './pages/search';\r\nimport Login from './pages/login';\r\nimport PrSite from './pages/pr_site';\r\nimport FrontPage from './pages/frontpage';\r\nimport HomePage from './pages/homepage';\r\nimport Setup from './pages/setup';\r\nimport Technicians from './pages/technicians';\r\n\r\n/**\r\n * This is the \"Root\" or top level. Our web app is really only a single page,\r\n * but lets you navigate through different pages using React Roter V4.\r\n */\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      festival: 'festival17', //this state will allow you to select which festival\r\n      festivalName: \"festival17\", //just use this as a default\r\n      isFestivalSelected: false,\r\n      user: null,\r\n      username: \"Not logged in\"\r\n    }\r\n\r\n    this.roleMap = new Map()\r\n  }\r\n\r\n  // Callback kalles som en funksjon når database-søket er ferdig.\r\n  // Dermed kan man sende inn en funksjon som skal kjøres når updateRoleMap blir ferdig.\r\n  /**\r\n   * Updates the rolemap\r\n   * @param {*} callback \r\n   */\r\n  updateRoleMap(callback) {\r\n    database.ref('users').once(\"value\", users => {\r\n      users.forEach(user => {\r\n          console.log(user.val().displayName)\r\n          this.roleMap.set(user.key, user.val().roles)\r\n      })\r\n    })\r\n    .then(\r\n      callback()\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Gets current user and user info from auth and database respectively\r\n   */\r\n  componentWillMount() {\r\n    // Get user from firebase Auth\r\n    console.log(\"Running auth\")\r\n    this.updateRoleMap(() => {\r\n      // Dette kjøres når updateRoleMap() er ferdig\r\n      firebaseApp.auth().onAuthStateChanged(user => {\r\n        if (user) {\r\n          // Logged in\r\n          database.ref(\"users\").once(\"value\", usersSnap => {\r\n            usersSnap.forEach(userSnap => {\r\n              console.log(userSnap.val())\r\n              console.log(userSnap.key === user.uid)\r\n              if (userSnap.key === user.uid) {\r\n                this.setState({username: userSnap.val().displayName})\r\n              }\r\n            })\r\n          })\r\n          .then(() => {     \r\n            console.log(\"Changed user\")\r\n            this.setState({\r\n              user: user\r\n            })\r\n          })\r\n          \r\n        } else {\r\n          // Logged out\r\n          this.setState({\r\n            user: null,\r\n            username: \"Not logged in\"\r\n          })\r\n        }\r\n      })\r\n    })\r\n\r\n    this.enter = this.enter.bind(this) //to enter the selected festival\r\n    this.exit = this.exit.bind(this) //to enter the selected festival\r\n\r\n    console.log(this.state.isFestivalSelected)\r\n  }\r\n\r\n  /**\r\n   * Does nothing\r\n   */\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  /**\r\n   * Sets isFestivalSelected to False and thereby \"exiting\" the\r\n   * festival. When false you are redirected to FrontPage\r\n   */\r\n  exit(){\r\n    console.log(\"exited festival\")\r\n    this.setState({\r\n      isFestivalSelected: false,\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * Sets festival and festivalName\r\n   * @param {key} festival \r\n   * @param {String} name \r\n   */\r\n  enter(festival,name){\r\n    console.log(\"switched to festival\", name, \"with key:\",festival)\r\n    this.setState({\r\n      isFestivalSelected: true,\r\n      festival: festival,\r\n      festivalName: name,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Checks if current user is allowed to acess path\r\n   */\r\n  isCorrectRole = path => {\r\n    if (this.state.user === null) {return false}\r\n\r\n    console.log(\"isCorrectRole is checking\", path, \"And user is\", this.state.user)\r\n    var rolesForUser = this.roleMap.get(this.state.user.uid)\r\n    console.log(\"roles for user is\",rolesForUser)\r\n\r\n    // Mulig rolemap ikke er oppdatert?\r\n    if (rolesForUser === undefined) {\r\n      // I så fall oppdater\r\n      this.updateRoleMap(() => {\r\n        rolesForUser = this.roleMap.get(this.state.user.uid)\r\n        // Om fortsatt ikke returner false, mulig en feil har skjedd?\r\n        if (rolesForUser === undefined) {\r\n          console.log(\"Roles for user still undefined!\")\r\n          return false\r\n        }\r\n      })\r\n    }\r\n\r\n    // Admin har tilgang til alt\r\n    if (rolesForUser.admin === true || path === \"/home\") {return true}\r\n\r\n    // Sjekk path\r\n    switch(path) {\r\n\r\n        case \"/bandbooking\":\r\n            return rolesForUser.booking === true && rolesForUser[\"booking-manager\"] === true\r\n        \r\n        case \"/bandbookingresponsible\":\r\n            return rolesForUser.booking === true && rolesForUser[\"booking-responsible\"] === true\r\n\r\n        case \"/banddatabase\":\r\n            return rolesForUser.booking === true\r\n\r\n        case \"/pricecalculator\":\r\n            return rolesForUser.booking === true\r\n\r\n        case \"/concerts\":\r\n            return rolesForUser.technician === true || rolesForUser.booking === true || rolesForUser.organizer === true\r\n\r\n        case \"/artists\":\r\n            return rolesForUser.booking === true\r\n\r\n        case \"/search\":\r\n            return rolesForUser.booking === true\r\n        \r\n        case \"/setup\":\r\n            return rolesForUser.booking === true || rolesForUser.organizer === true\r\n\r\n        case \"/manager\":\r\n            return rolesForUser.manager === true\r\n        \r\n        case \"/technicians\":\r\n            return rolesForUser.organizer === true\r\n\r\n        case \"/pr\":\r\n            return rolesForUser.organizer === true\r\n\r\n        default:\r\n            return false\r\n\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Renders the page, which consists of a navbar and a Switch,\r\n   * which renders a component based on path\r\n   */\r\n  render() {\r\n    console.log(\"Displayname:\", this.state.username)\r\n\r\n    if (! this.state.isFestivalSelected){\r\n      console.log(\"No festival. Redirecting to Frontpage\")\r\n      return <Route path=\"/\" render={(props)=><FrontPage {...props} enter={this.enter}/>}/>\r\n    } else if (!this.state.user && window.location.pathname !== \"/home\") {\r\n      return <Redirect to=\"/home\" />\r\n    }\r\n\r\n    const PrivateRoute = ({ component: Component, path: pathname, ...rest }) => (\r\n      <Route {...rest} render={props => (\r\n        this.isCorrectRole(pathname) ? (\r\n          <Component {...props} state={this.state}/>\r\n        ) : (\r\n          <Redirect to={{\r\n            pathname: '/home',\r\n            state: { from: props.location }\r\n          }}/>\r\n        )\r\n      )}/>\r\n    )\r\n\r\n    \r\n    return (\r\n      <div>\r\n        <NavComponent user={this.state.user} username={this.state.username} festivalName={this.state.festivalName} exit={this.exit}/>\r\n\r\n        <div className=\"container\" id=\"mainContainer\">\r\n          <Switch>\r\n            <Route exact path=\"/\" render={(props)=><HomePage {...props} state={this.state}/>}/>\r\n            <Route path=\"/login\" render={(props)=><Login {...props} state={this.state}/>}/>\r\n            <Route path=\"/home\" render={(props) => <HomePage {...props} state={this.state}/>}/>\r\n\r\n\r\n            <PrivateRoute path=\"/setup\" component={Setup}/>\r\n            <PrivateRoute path=\"/bandbooking\" component={BandBooking}/>\r\n            <PrivateRoute path=\"/bandbookingresponsible\" component={BandBookingResponsible}/>\r\n            \r\n            <PrivateRoute path=\"/banddatabase\" component={BandDatabase}/>\r\n            <PrivateRoute path=\"/pricecalculator\" component={PriceCalculator}/>\r\n            <PrivateRoute path=\"/concerts\" component={ConcertPage}/>\r\n            <PrivateRoute path=\"/artists\" component={Artists}/>\r\n            <PrivateRoute path=\"/search\" component={Search}/>\r\n            <PrivateRoute path=\"/pr\" component={PrSite}/>\r\n            <PrivateRoute path=\"/admin\" component={AdminPage}/>\r\n            <PrivateRoute path=\"/manager\" component={ManagerSite}/>\r\n            <PrivateRoute path=\"/technicians\" component={Technicians}/>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "App",
    "memberof": "src/App.js",
    "static": true,
    "longname": "src/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "app/src/App.js",
    "importStyle": "App",
    "description": "This is the \"Root\" or top level. Our web app is really only a single page,\nbut lets you navigate through different pages using React Roter V4.",
    "lineNumber": 34,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "state",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#state",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": string, \"festivalName\": string, \"isFestivalSelected\": *, \"user\": *, \"username\": string}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "roleMap",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#roleMap",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "updateRoleMap",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#updateRoleMap",
    "access": "public",
    "description": "Updates the rolemap",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#componentWillMount",
    "access": "public",
    "description": "Gets current user and user info from auth and database respectively",
    "lineNumber": 71,
    "params": [],
    "return": null
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#componentDidMount",
    "access": "public",
    "description": "Does nothing",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "exit",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#exit",
    "access": "public",
    "description": "Sets isFestivalSelected to False and thereby \"exiting\" the\nfestival. When false you are redirected to FrontPage",
    "lineNumber": 122,
    "params": [],
    "return": null
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "enter",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#enter",
    "access": "public",
    "description": "Sets festival and festivalName",
    "lineNumber": 134,
    "params": [
      {
        "nullable": null,
        "types": [
          "key"
        ],
        "spread": false,
        "optional": false,
        "name": "festival",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "isCorrectRole",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#isCorrectRole",
    "access": "public",
    "description": "Checks if current user is allowed to acess path",
    "lineNumber": 146,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "render",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#render",
    "access": "public",
    "description": "Renders the page, which consists of a navbar and a Switch,\nwhich renders a component based on path",
    "lineNumber": 216,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "file",
    "name": "src/components/allfestivals/AllFestivals.js",
    "content": "import React, {Component } from 'react'\r\nimport './allfestivals.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport Festival from '../../components/festival/Festival'\r\n\r\n/**\r\n * Component used to load all festivals from database\r\n */\r\nexport default class AllFestivals extends Component {\r\n\r\n    /**\r\n     * Initializes state\r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            festivals: [],\r\n            selectedFestival:\"\"\r\n        }\r\n\r\n        this.enter = this.enter.bind(this)\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {firebase.database.Reference.key} festival \r\n     * @param {String} name \r\n     */\r\n    enter(festival,name){\r\n        this.props.enter(festival,name)\r\n    }\r\n\r\n    /**\r\n     * Standard React function, runs before component renders.\r\n     * Using componentDidMount() instead is recommended.\r\n     */\r\n    componentWillMount(){\r\n        let previousFestivals = this.state.festivals;\r\n\r\n        database.ref().on('child_added', snap => {\r\n            if (snap.val().name){ //only render the festivals, do this by checking if it has name object in database\r\n                previousFestivals.push({\r\n                    id: snap.key,\r\n                    name: snap.val().name,\r\n                })\r\n            }\r\n\r\n            this.setState({\r\n                festivals: previousFestivals,\r\n            })\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Renders list of festivals found in database\r\n     */\r\n    render() {\r\n        return (\r\n            <div id=\"festivalButtons\">\r\n               {this.state.festivals.map((festival) => {\r\n                    return(<Festival enter={this.enter} festival={festival.id} name={festival.name} key={festival.id}/>)\r\n                })}\r\n             </div>\r\n        )\r\n    }\r\n\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/allfestivals/AllFestivals.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 63,
    "kind": "class",
    "name": "AllFestivals",
    "memberof": "src/components/allfestivals/AllFestivals.js",
    "static": true,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/allfestivals/AllFestivals.js",
    "importStyle": "AllFestivals",
    "description": "Component used to load all festivals from database",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 64,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals#constructor",
    "access": "public",
    "description": "Initializes state",
    "lineNumber": 16
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "static": false,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals#state",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"festivals\": *, \"selectedFestival\": *}"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "enter",
    "memberof": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals#enter",
    "access": "public",
    "description": "",
    "lineNumber": 31,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "festival",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals#componentWillMount",
    "access": "public",
    "description": "Standard React function, runs before component renders.\nUsing componentDidMount() instead is recommended.",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/allfestivals/AllFestivals.js~AllFestivals",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/allfestivals/AllFestivals.js~AllFestivals#render",
    "access": "public",
    "description": "Renders list of festivals found in database",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "file",
    "name": "src/components/artist/Artist.js",
    "content": "import React, {Component } from 'react'\r\nimport './artist.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport spotifyIcon from '../../static/img/spotify.png'\r\n\r\n/**\r\n * Component used to render an entry in the table in /search\r\n */\r\nexport default class Artist extends Component {\r\n\r\n    /**\r\n     * Initializes state\r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            name: props.name, //String\r\n            info: props.info, //String\r\n            popularity: props.popularity, //Int\r\n            followers: props.followers, //Int\r\n            genres: props.genres,\r\n            uri: props.uri,\r\n            pic: props.pic,\r\n            /* earlierConcerts: props.earlierConcerts, //List\r\n            concertNeeds: props.concertNeeds, // String //kanskje cost hentes herifra. Også ting som antall mikrofoner og instrumenter\r\n            cost: props.cost, // Int\r\n            approved: false, // Boolean\r\n            booked: false, // Boolean */\r\n            addButtonDisabled: false\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Decides if component should update state based on props\r\n     * @param {props} nextProps \r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.info != nextProps.info) {\r\n            this.setState({info: nextProps.info})\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method tries to add an Artist to the database.\r\n     * If there's an Artist with the same Spotify URI already in the database, it alerts the user.\r\n     * @param {String} name \r\n     * @param {Integer} followers \r\n     * @param {Integer} popularity \r\n     * @param {Array<String>} genres \r\n     * @param {String} uri \r\n     * @param {String} pic \r\n     */\r\n    addArtist(name,followers,popularity,genres,uri,pic){\r\n        this.setState({addButtonDisabled: true})\r\n\r\n        database.ref(this.state.festival).child(\"artists\").orderByChild(\"uri\").equalTo(uri).once(\"value\", artistEqualSnap => {\r\n            if (! artistEqualSnap.exists()) {\r\n                const data = {\r\n                    name: name,\r\n                    followers: followers,\r\n                    popularity: popularity, \r\n                    genres: genres,\r\n                    uri: uri,\r\n                    pic: pic,\r\n                }\r\n                database.ref(this.state.festival).child(\"artists\").push(data)\r\n                alert(name + \" is now added to database\");\r\n            } else {\r\n                alert(name + \" is already in database\")\r\n            }\r\n        })\r\n        .then(() => {\r\n            this.setState({addButtonDisabled: false})\r\n        }) \r\n\r\n           \r\n    }\r\n\r\n    /**\r\n     * Returns a table row with the information gotten from props\r\n     */\r\n    render() {\r\n\r\n        let genres = \"\"\r\n        if (this.state.genres !== undefined) {\r\n            genres = this.state.genres.slice(0,2).join(\", \")\r\n        } else {\r\n            genres = \"None provided\"\r\n        }\r\n\r\n        return (\r\n            <tr className = \"artistTable\">\r\n                <td> {this.state.name} </td>\r\n                <td> {this.state.followers} </td>\r\n                <td> {this.state.popularity} </td>\r\n                <td> {genres} </td>\r\n                <td> <a href={this.state.uri}><img  width=\"30\" height=\"30\" src={spotifyIcon}></img></a>\r\n                </td>\r\n                <td> <button disabled={this.state.addButtonDisabled} onClick={() => this.addArtist(\r\n                        this.state.name, \r\n                        this.state.followers, \r\n                        this.state.popularity,\r\n                        genres,\r\n                        this.state.uri,\r\n                        this.state.pic,\r\n                    )}> Add </button>\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/artist/Artist.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 71,
    "kind": "class",
    "name": "Artist",
    "memberof": "src/components/artist/Artist.js",
    "static": true,
    "longname": "src/components/artist/Artist.js~Artist",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/artist/Artist.js",
    "importStyle": "Artist",
    "description": "Component used to render an entry in the table in /search",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 72,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/artist/Artist.js~Artist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist/Artist.js~Artist#constructor",
    "access": "public",
    "description": "Initializes state",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/artist/Artist.js~Artist",
    "static": false,
    "longname": "src/components/artist/Artist.js~Artist#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"name\": *, \"info\": *, \"popularity\": *, \"followers\": *, \"genres\": *, \"uri\": *, \"pic\": *, \"addButtonDisabled\": *}"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "src/components/artist/Artist.js~Artist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist/Artist.js~Artist#componentWillReceiveProps",
    "access": "public",
    "description": "Decides if component should update state based on props",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "addArtist",
    "memberof": "src/components/artist/Artist.js~Artist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist/Artist.js~Artist#addArtist",
    "access": "public",
    "description": "This method tries to add an Artist to the database.\nIf there's an Artist with the same Spotify URI already in the database, it alerts the user.",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "followers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "popularity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "genres",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "uri",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "pic",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/artist/Artist.js~Artist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist/Artist.js~Artist#render",
    "access": "public",
    "description": "Returns a table row with the information gotten from props",
    "lineNumber": 86,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/components/artistlist/ArtistList.js",
    "content": "import React, {Component } from 'react'\r\nimport './artistlist.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport spotifyIcon from '../../static/img/spotify.png'\r\n\r\n/**\r\n * Component determines style of and returns an entry in the list of artists on the artists page. \r\n */\r\nexport default class ArtistList extends Component {\r\n\r\n    /**\r\n     * \r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n\r\n            id: props.id,\r\n            name: props.name, \r\n            followers: props.followers, \r\n            popularity: props.popularity, \r\n            genres: props.genres,\r\n            uri: props.uri,\r\n            reviews: props.reviews,\r\n            status: props.status,\r\n\r\n            deleted: false,\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Deletes an Artist if it doesn't have any concerts or are not in the process of getting booked.\r\n     * @param {firebase.database.Reference.key} key \r\n     * @param {String} status \r\n     */\r\n    deleteArtist(key,status){\r\n        if(status == null || status == \"\"){ //only remove artists that have not concerts or are not in booking process\r\n            database.ref(this.state.festival).child(\"artists\").child(key).remove() \r\n            \r\n            this.setState({ //nice way to hide deleted elements\r\n                deleted: true,\r\n            })\r\n            }\r\n        \r\n        else(\r\n            alert(\"Cannot remove \", this.state.name)\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns an ID that makes CSS style it accordingly to status\r\n     * @param {String} status \r\n     */\r\n    setColorCode(status){\r\n        switch(status){\r\n            case(\"booked\"):\r\n                return \"colorCodeBooked\"\r\n            case(\"declined\"):\r\n                return \"colorCodeDeclined\"\r\n            case(\"pending\"):\r\n                return \"colorCodePending\"\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Renders a row in a table based on status\r\n     */\r\n    render() {\r\n\r\n        if(this.state.deleted){ //nice way to hide deleted elements\r\n            return(null)\r\n         }\r\n\r\n        if(this.state.status == null || this.state.status ===\"\" || this.state.status ===\"declined\"){ //nice way to hide deleted elements\r\n            let colorCodedRow = this.setColorCode(this.state.status); //returns a css id\r\n            return (\r\n                <tr id = {colorCodedRow} >\r\n                    <td> {this.state.name} </td>\r\n                    <td> {this.state.followers} </td>\r\n                    <td> {this.state.popularity} </td>\r\n                    <td> {this.state.genres} </td>\r\n                    <td> {this.state.status} </td>\r\n                    <td> <a href={this.state.uri}><img  width=\"30\" height=\"30\" src={spotifyIcon}></img></a>\r\n                    </td>\r\n                    <td> <button className=\"removeX\" onClick={() => this.deleteArtist(\r\n                            this.state.id,\r\n                            this.state.status,\r\n                        )}> X </button>\r\n                    </td>\r\n                </tr>\r\n    \r\n            )\r\n        }\r\n        \r\n        let colorCodedRow = this.setColorCode(this.state.status); //returns a css id\r\n        return (\r\n            <tr id = {colorCodedRow} >\r\n                <td> {this.state.name} </td>\r\n                <td> {this.state.followers} </td>\r\n                <td> {this.state.popularity} </td>\r\n                <td> {this.state.genres} </td>\r\n                <td> {this.state.status} </td>\r\n                <td> <a href={this.state.uri}><img  width=\"30\" height=\"30\" src={spotifyIcon}></img></a>\r\n                </td>\r\n\r\n            </tr>\r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/artistlist/ArtistList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "ArtistList",
    "memberof": "src/components/artistlist/ArtistList.js",
    "static": true,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/artistlist/ArtistList.js",
    "importStyle": "ArtistList",
    "description": "Component determines style of and returns an entry in the list of artists on the artists page. ",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/artistlist/ArtistList.js~ArtistList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/artistlist/ArtistList.js~ArtistList",
    "static": false,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"id\": *, \"name\": *, \"followers\": *, \"popularity\": *, \"genres\": *, \"uri\": *, \"reviews\": *, \"status\": *, \"deleted\": *}"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "deleteArtist",
    "memberof": "src/components/artistlist/ArtistList.js~ArtistList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList#deleteArtist",
    "access": "public",
    "description": "Deletes an Artist if it doesn't have any concerts or are not in the process of getting booked.",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "setColorCode",
    "memberof": "src/components/artistlist/ArtistList.js~ArtistList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList#setColorCode",
    "access": "public",
    "description": "Returns an ID that makes CSS style it accordingly to status",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/artistlist/ArtistList.js~ArtistList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artistlist/ArtistList.js~ArtistList#render",
    "access": "public",
    "description": "Renders a row in a table based on status",
    "lineNumber": 74,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/components/artist_pr/ArtistPR.js",
    "content": "import React, {Component } from 'react'\r\nimport './artist.css';\r\n\r\n/**\r\n * Component that renders a div with contact information.\r\n * This information is passed into it with props.\r\n */\r\nexport default class ArtistPR extends Component {\r\n\r\n    /**\r\n     * Initializes State\r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: props.name,\r\n            contact_info: props.contact_info,\r\n            sales_number: props.sales_number,\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a div with concat information\r\n     */\r\n    render() {\r\n        return (\r\n            <div className = \"artistDiv\">\r\n                <h2> {this.state.name} </h2>\r\n                <p> contact_info: {this.state.contact_info} </p>\r\n                <p> sales_number: {this.state.sales_number} </p>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/artist_pr/ArtistPR.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "ArtistPR",
    "memberof": "src/components/artist_pr/ArtistPR.js",
    "static": true,
    "longname": "src/components/artist_pr/ArtistPR.js~ArtistPR",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/artist_pr/ArtistPR.js",
    "importStyle": "ArtistPR",
    "description": "Component that renders a div with contact information.\nThis information is passed into it with props.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/artist_pr/ArtistPR.js~ArtistPR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist_pr/ArtistPR.js~ArtistPR#constructor",
    "access": "public",
    "description": "Initializes State",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 87,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/artist_pr/ArtistPR.js~ArtistPR",
    "static": false,
    "longname": "src/components/artist_pr/ArtistPR.js~ArtistPR#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": *, \"contact_info\": *, \"sales_number\": *}"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/artist_pr/ArtistPR.js~ArtistPR",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/artist_pr/ArtistPR.js~ArtistPR#render",
    "access": "public",
    "description": "Renders a div with concat information",
    "lineNumber": 26,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/components/concertprogram/ConcertProgram.js",
    "content": "import React, {Component } from 'react'\r\n\r\nimport './concertprogram.css';\r\nimport database from '../../database' //firebase\r\nimport template from '../../static/img/defaultArtistPic.jpg'\r\n\r\n/**\r\n * Component that fetches info for concert from database\r\n */\r\nexport default class ConcertProgram extends Component {\r\n\r\n    /**\r\n     * Here used to set current festival and concert\r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = { \r\n            festival: props.festival,\r\n            concert: props.concert,\r\n            startTime: props.startTime,\r\n            endTime: props.endTime,\r\n            artist: \"\",\r\n            name:\"\",\r\n            scene: \"\",\r\n            pic:\"\"\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Here used to pull info for concert from database. \r\n     */\r\n    componentDidMount() {\r\n        if(this.state.concert != null){ //need to check if there is a concert on that timeslot\r\n            database.ref(this.state.festival).child('concerts').child(this.state.concert).once('value', snap => {\r\n              var vals = snap.val();\r\n              console.log(vals.artist, \"hehhhhhhhhhhhhhhhhhhhhhhhhhhh\")\r\n             \r\n              this.setState({\r\n                artist: vals.artist,\r\n                name: vals.name,\r\n                scene: vals.sceneName,\r\n                pic: vals.pic\r\n\r\n              })\r\n            })\r\n           \r\n        }\r\n        \r\n            \r\n       \r\n      }\r\n    \r\n    /**\r\n     * Updates target state based on event value.\r\n     * This way the state always reflects value in different inputs\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    /**\r\n     * Renders a slot based on if there is a concert or not. \r\n     */\r\n    render() {\r\n        if(this.state.concert==null){\r\n            return(<div id=\"availableProgramSlot\">\r\n                <div id=\"\">{this.state.startTime}-{this.state.endTime}</div>\r\n                </div>)\r\n        }\r\n        return (\r\n            <div id=\"bookedProgramSlot\">\r\n                <div id=\"programArtistName\">{this.state.name}</div>\r\n                <img src={this.state.pic} id=\"smallArtistPicture\"></img>\r\n                <div id=\"concertTime\">{this.state.scene}</div>\r\n                <div id=\"concertTime\">{this.state.startTime}-{this.state.endTime}</div>\r\n            </div>\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/concertprogram/ConcertProgram.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "class",
    "name": "ConcertProgram",
    "memberof": "src/components/concertprogram/ConcertProgram.js",
    "static": true,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/concertprogram/ConcertProgram.js",
    "importStyle": "ConcertProgram",
    "description": "Component that fetches info for concert from database",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 91,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram#constructor",
    "access": "public",
    "description": "Here used to set current festival and concert",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "static": false,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"concert\": *, \"startTime\": *, \"endTime\": *, \"artist\": *, \"name\": *, \"scene\": *, \"pic\": *}"
      ]
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram#componentDidMount",
    "access": "public",
    "description": "Here used to pull info for concert from database. ",
    "lineNumber": 35,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram#handleChange",
    "access": "public",
    "description": "Updates target state based on event value.\nThis way the state always reflects value in different inputs",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/concertprogram/ConcertProgram.js~ConcertProgram",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/concertprogram/ConcertProgram.js~ConcertProgram#render",
    "access": "public",
    "description": "Renders a slot based on if there is a concert or not. ",
    "lineNumber": 71,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "file",
    "name": "src/components/createday/CreateDay.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used to create a day\r\n */\r\nexport default class CreateDay extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            date:\"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.create = this.create.bind(this);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Keeps state updated according to the different input fields that may change\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    /**\r\n     * Pushes a new date to the database\r\n     * @param {String} date \r\n     */\r\n    create(date) {\r\n        // Ikke push en tom date\r\n        if (! date) {\r\n            alert(\"Date is empty!\")\r\n            return\r\n        }\r\n\r\n        var data = {\r\n          date: date,\r\n        }\r\n        database.ref(this.state.festival).child(\"program\").push(data);\r\n\r\n        this.setState({\r\n            date: \"\",\r\n        })\r\n      }\r\n\r\n    /**\r\n     * Renders a table row that may be used to create days\r\n     */\r\n    render() {\r\n        var dateToday = new Date().toLocaleDateString();\r\n\r\n        // Burde ikke input være type=\"date\"?\r\n        return (\r\n            <tr>\r\n                <td> <input name=\"date\" placeholder={dateToday} type=\"text\" value={this.state.date} onChange={this.handleChange}/></td>\r\n                <td> <button onClick={() => this.create(\r\n                        this.state.date,\r\n                    )}> Add Day</button>\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/createday/CreateDay.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "class",
    "name": "CreateDay",
    "memberof": "src/components/createday/CreateDay.js",
    "static": true,
    "longname": "src/components/createday/CreateDay.js~CreateDay",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/createday/CreateDay.js",
    "importStyle": "CreateDay",
    "description": "Component used to create a day",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 98,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/createday/CreateDay.js~CreateDay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createday/CreateDay.js~CreateDay#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 99,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/createday/CreateDay.js~CreateDay",
    "static": false,
    "longname": "src/components/createday/CreateDay.js~CreateDay#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"date\": *}"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/createday/CreateDay.js~CreateDay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createday/CreateDay.js~CreateDay#handleChange",
    "access": "public",
    "description": "Keeps state updated according to the different input fields that may change",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "create",
    "memberof": "src/components/createday/CreateDay.js~CreateDay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createday/CreateDay.js~CreateDay#create",
    "access": "public",
    "description": "Pushes a new date to the database",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/createday/CreateDay.js~CreateDay",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createday/CreateDay.js~CreateDay#render",
    "access": "public",
    "description": "Renders a table row that may be used to create days",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/components/createddays/CreatedDays.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport Slots from '../slots/Slots'\r\n\r\n/**\r\n * Component that is used to display day with slots found in database\r\n */\r\nexport default class CreatedDays extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            day:props.day, //name/date of day\r\n            key:props.id, //key in firebase, must call it id...\r\n\r\n            slots: [],\r\n            start:\"\",\r\n            end:\"\",\r\n\r\n            deleted:false,\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addSlot = this.addSlot.bind(this);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Here used to pull slots from database\r\n     */\r\n    componentWillMount() {\r\n        let prevSlots = this.state.slots\r\n        \r\n            database.ref(this.state.festival).child('program').child(this.state.key).child(\"slots\").on('child_added', snap => {\r\n              var vals = snap.val();\r\n        \r\n              prevSlots.push({\r\n                id: snap.key,\r\n                start: vals.start,\r\n                end:vals.end,\r\n              })\r\n        \r\n              this.setState({\r\n                slots: prevSlots,\r\n              })\r\n            })\r\n       \r\n      }\r\n\r\n    /**\r\n     * Adds a slot in the database\r\n     * @param {String} start \r\n     * @param {String} end \r\n     */\r\n    addSlot(start,end){\r\n        if(start ===\"\" || end ===\"\"){\r\n            alert(\"please input start and end time\")\r\n        }\r\n        else{\r\n            database.ref(this.state.festival).child('program').child(this.state.key).child(\"slots\").push(\r\n                {start:start,\r\n                end: end,\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hides deleted days\r\n     * @param {firebase.database.Reference.key} key \r\n     */\r\n    removeDay(key){\r\n        if(window.confirm(\"Are you sure you want to remove the day?\\n\\nRemoving a day from a festival will affect all concerts on that day\")){\r\n        database.ref(this.state.festival).child('program').child(key).remove()\r\n\r\n        this.setState({ //nice way to hide deleted elements\r\n            deleted: true,\r\n          })\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Keeps state updated accordingly\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    /**\r\n     * Renders a table with day\r\n     */\r\n    render() {\r\n\r\n        if(this.state.deleted){ //nice way to hide deleted elements\r\n            return(null)\r\n         }\r\n\r\n        return (\r\n                <table id=\"programTable\">\r\n                    <thead>\r\n                        <input name=\"start\" placeholder=\"19\" size={2} type=\"text\" value={this.state.start} onChange={this.handleChange}/>\r\n                        -\r\n                        <input name=\"end\" placeholder=\"21\" size={2} type=\"text\" value={this.state.end} onChange={this.handleChange}/>\r\n                        <button onClick={() => this.addSlot(\r\n                                    this.state.start,\r\n                                    this.state.end,\r\n                                 )}> Add Time </button>\r\n\r\n                        <tr>\r\n                            <th>\r\n                                {this.state.day} \r\n                                     \r\n                            </th> \r\n                            <th>\r\n                                <button className=\"removeX\" onClick={() => this.removeDay(\r\n                                    this.state.key\r\n                                )}>X</button> \r\n                            </th> \r\n                    \r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.state.slots.map((slot) => {\r\n                            return(<Slots\r\n                            festival={this.state.festival}\r\n                            dayKey={this.state.key}\r\n                            id={slot.id}\r\n                            start={slot.start}\r\n                            end={slot.end}\r\n                            />\r\n                        )\r\n                        })\r\n                        }\r\n                    </tbody>\r\n                    \r\n                </table>\r\n                \r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/createddays/CreatedDays.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "class",
    "name": "CreatedDays",
    "memberof": "src/components/createddays/CreatedDays.js",
    "static": true,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/createddays/CreatedDays.js",
    "importStyle": "CreatedDays",
    "description": "Component that is used to display day with slots found in database",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 107,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"day\": *, \"key\": *, \"slots\": *, \"start\": *, \"end\": *, \"deleted\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#componentWillMount",
    "access": "public",
    "description": "Here used to pull slots from database",
    "lineNumber": 34,
    "params": [],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "addSlot",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#addSlot",
    "access": "public",
    "description": "Adds a slot in the database",
    "lineNumber": 58,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "removeDay",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#removeDay",
    "access": "public",
    "description": "Hides deleted days",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#handleChange",
    "access": "public",
    "description": "Keeps state updated accordingly",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/createddays/CreatedDays.js~CreatedDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createddays/CreatedDays.js~CreatedDays#render",
    "access": "public",
    "description": "Renders a table with day",
    "lineNumber": 100,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/components/createfestival/CreateFestival.js",
    "content": "import React, {Component } from 'react'\r\nimport './createfestival.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used to create festival\r\n */\r\nexport default class CreateFestival extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            name: props.name,\r\n        }\r\n\r\n        this.createFestival = this.createFestival.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    /**\r\n     * Keeps state updated\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n          [e.target.name]: e.target.value\r\n        })\r\n      }\r\n\r\n\r\n    /**\r\n     * Passes desired festival name one layer up\r\n     * @param {String} name \r\n     */\r\n    createFestival(name){\r\n       this.props.create(name);\r\n    }\r\n\r\n\r\n    /**\r\n     * Renders a input form to make a new festival\r\n     */\r\n    render() {\r\n    return(\r\n        <div id=\"createNewFestival\">\r\n            <input type=\"text\" name=\"name\" placeholder=\"UKA 2018\" value={this.state.name} onChange={this.handleChange}/>\r\n            <button type=\"button\" onClick={() => this.createFestival(this.state.name)}> Create </button>\r\n        </div>\r\n    )\r\n    }\r\n\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/createfestival/CreateFestival.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "CreateFestival",
    "memberof": "src/components/createfestival/CreateFestival.js",
    "static": true,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/createfestival/CreateFestival.js",
    "importStyle": "CreateFestival",
    "description": "Component used to create festival",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "static": false,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"name\": *}"
      ]
    }
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "createFestival",
    "memberof": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival#createFestival",
    "access": "public",
    "description": "Passes desired festival name one layer up",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/createfestival/CreateFestival.js~CreateFestival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createfestival/CreateFestival.js~CreateFestival#render",
    "access": "public",
    "description": "Renders a input form to make a new festival",
    "lineNumber": 44,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/components/createscene/CreateScene.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component that can be used to create a scene\r\n */\r\nexport default class CreateScene extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            name: \"\",\r\n            capacity: \"\",\r\n            cost: \"\",\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.create = this.create.bind(this);\r\n        \r\n    }\r\n\r\n    /**\r\n     * Keeps state updated\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    /**\r\n     * Creates a new scene in the database and resets state\r\n     * @param {String} name \r\n     * @param {Integer} capacity \r\n     * @param {Integer} cost \r\n     */\r\n    create(name, capacity, cost) {\r\n        var data = {\r\n          name: name,\r\n          capacity: capacity,\r\n          cost: cost,\r\n        }\r\n        database.ref(this.state.festival).child(\"scenes\").push(data);\r\n\r\n        this.setState({\r\n            name: \"\",\r\n            capacity: \"\",\r\n            cost: \"\",\r\n        })\r\n      }\r\n\r\n    /**\r\n     * Renders a table row used to create a new scene\r\n     */\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td> <input name=\"name\" placeholder=\"Death Valley\" type=\"text\" value={this.state.name} onChange={this.handleChange}/></td>\r\n                <td> <input name=\"capacity\" placeholder=\"10,000\" type=\"number\" value={this.state.capacity} onChange={this.handleChange}/></td> \r\n                <td> <input name=\"cost\" placeholder=\"5000 $\" type=\"number\" value={this.state.cost} onChange={this.handleChange}/></td> \r\n                <td> <button onClick={() => this.create(\r\n                        this.state.name,\r\n                        this.state.capacity,\r\n                        this.state.cost,\r\n                    )}> Create </button>\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/createscene/CreateScene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "CreateScene",
    "memberof": "src/components/createscene/CreateScene.js",
    "static": true,
    "longname": "src/components/createscene/CreateScene.js~CreateScene",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/createscene/CreateScene.js",
    "importStyle": "CreateScene",
    "description": "Component that can be used to create a scene",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/createscene/CreateScene.js~CreateScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createscene/CreateScene.js~CreateScene#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/createscene/CreateScene.js~CreateScene",
    "static": false,
    "longname": "src/components/createscene/CreateScene.js~CreateScene#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"name\": *, \"capacity\": *, \"cost\": *}"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/createscene/CreateScene.js~CreateScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createscene/CreateScene.js~CreateScene#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "create",
    "memberof": "src/components/createscene/CreateScene.js~CreateScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createscene/CreateScene.js~CreateScene#create",
    "access": "public",
    "description": "Creates a new scene in the database and resets state",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "capacity",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "cost",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/createscene/CreateScene.js~CreateScene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/createscene/CreateScene.js~CreateScene#render",
    "access": "public",
    "description": "Renders a table row used to create a new scene",
    "lineNumber": 59,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/components/festival/Festival.js",
    "content": "import React, {Component } from 'react'\r\nimport './festival.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used to display button to enter specific festival\r\n */\r\nexport default class Festival extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            festival: props.festival,\r\n            name: props.name,   \r\n        }\r\n        this.enterFestival = this.enterFestival.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Passes chosen festival to enter one layer up\r\n     * @param {firebase.database.Reference.key} festival \r\n     * @param {String} name \r\n     */\r\n    enterFestival(festival,name){\r\n        this.props.enter(festival,name);\r\n    }\r\n\r\n    /**\r\n     * Renders a button for this festival\r\n     */\r\n    render() {\r\n        return (\r\n            <button id=\"festivalSelector\" onClick={() => \r\n                this.enterFestival(this.state.festival,this.state.name)}>{this.state.name}</button>\r\n        )\r\n    }\r\n\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/festival/Festival.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "Festival",
    "memberof": "src/components/festival/Festival.js",
    "static": true,
    "longname": "src/components/festival/Festival.js~Festival",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/festival/Festival.js",
    "importStyle": "Festival",
    "description": "Component used to display button to enter specific festival",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/festival/Festival.js~Festival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/festival/Festival.js~Festival#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/festival/Festival.js~Festival",
    "static": false,
    "longname": "src/components/festival/Festival.js~Festival#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"name\": *}"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "enterFestival",
    "memberof": "src/components/festival/Festival.js~Festival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/festival/Festival.js~Festival#enterFestival",
    "access": "public",
    "description": "Passes chosen festival to enter one layer up",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "festival",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/festival/Festival.js~Festival",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/festival/Festival.js~Festival#render",
    "access": "public",
    "description": "Renders a button for this festival",
    "lineNumber": 32,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/components/managerequest/ManageRequest.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used to show a request to manager\r\n */\r\nexport default class ManageRequest extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            requestKey: props.requestKey,\r\n            artist: props.artist,\r\n            scene: props.scene,\r\n            name: props.name,\r\n            date: props.date,\r\n            time:props.time,\r\n            price:props.price,\r\n            technicalrequirements: \"\",\r\n            rider: \"\",\r\n\r\n            dateDisplay: props.dateDisplay,\r\n            timeDisplay: props.timeDisplay,\r\n            sceneDisplay: props.sceneDisplay,\r\n            \r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.checkAccept = this.checkAccept.bind(this);\r\n        this.accept = this.accept.bind(this);\r\n        this.decline = this.decline.bind(this);\r\n        \r\n    }\r\n    \r\n    /**\r\n     * Keeps state updated\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n    \r\n\r\n    /**\r\n     * Checks if input fields are empty and asks for confirmation to submute empty rider and techSpecs.\r\n     * Then passes information on to this.accept()\r\n     * @param {*} artist \r\n     * @param {*} name \r\n     * @param {*} scene \r\n     * @param {*} sceneDisplay \r\n     * @param {*} date \r\n     * @param {*} time \r\n     * @param {*} price \r\n     * @param {*} key \r\n     * @param {*} technicalrequirements \r\n     * @param {*} rider \r\n     */\r\n    checkAccept(artist, name, scene, sceneDisplay, date, time, price, key, technicalrequirements, rider){\r\n        if(this.state.technicalrequirements ==\"\" || this.state.rider ==\"\"){\r\n            if(window.confirm(\"Are your sure you don't want to provide rider or technical requirements\"))\r\n                {this.accept(artist, name, scene, sceneDisplay, date, time, price, key, technicalrequirements, rider)}\r\n        }\r\n        else(this.accept(artist, name, scene, sceneDisplay, date, time, price, key, technicalrequirements, rider))\r\n    }\r\n\r\n    /**\r\n     * Updates database according to accept\r\n     * @param {*} artist \r\n     * @param {*} name \r\n     * @param {*} scene \r\n     * @param {*} sceneDisplay \r\n     * @param {*} date \r\n     * @param {*} time \r\n     * @param {*} price \r\n     * @param {*} key \r\n     * @param {*} technicalrequirements \r\n     * @param {*} rider \r\n     */\r\n    accept(artist, name, scene, sceneDisplay, date, time, price, key, technicalrequirements, rider) {\r\n       \r\n        var data = {\r\n          artist: artist,\r\n          name: name,\r\n          scene: scene,\r\n          sceneName: sceneDisplay,\r\n          date: date,\r\n          time: time,\r\n          price: price,\r\n          status: \"booked\",\r\n          requirements: technicalrequirements,\r\n          rider: rider,\r\n        }\r\n        let concertKey = database.ref(this.state.festival).child(\"concerts\").push(data).key;\r\n        database.ref(this.state.festival).child(\"requests\").child(key).remove(); //remove from requests\r\n        database.ref(this.state.festival).child('artists').child(artist).update({status:\"booked\"}) //setter artist status til booked \r\n        database.ref(this.state.festival).child('program').child(date).child('slots').child(time).update({concert: concertKey}) //legger til konserten i slot\r\n        alert(this.state.name + \" booked on \" + this.state.sceneDisplay + \"\\n\"\r\n        + this.state.dateDisplay + \" (\" + this.state.timeDisplay + \")\" + \"\\n\"\r\n        + \"requirements: \" + technicalrequirements + \"\\n\"\r\n        + \"rider: \" + rider);\r\n        }\r\n\r\n      /**\r\n       * Updates database according to decline\r\n       * @param {*} artist \r\n       * @param {*} key \r\n       */\r\n      decline(artist,key) {\r\n        database.ref(this.state.festival).child(\"requests\").child(key).remove();\r\n        database.ref(this.state.festival).child('artists').child(artist).update({status:\"declined\"})\r\n        .then(() => {\r\n            this.forceUpdate();\r\n        })\r\n      }\r\n    \r\n\r\n\r\n\r\n    /**\r\n     * Renders a table row with request info\r\n     */\r\n    render() {\r\n        return (\r\n            <tr>\r\n                <td> {this.state.name} </td>\r\n                <td> {this.state.price} </td>\r\n                <td> {this.state.sceneDisplay} </td>\r\n                <td> {this.state.dateDisplay} \r\n                     {\" \"}\r\n                     ({this.state.timeDisplay}) \r\n                </td>\r\n            \r\n                \r\n                <td> <input name=\"technicalrequirements\" type=\"text\" placeholder=\"minimum eight microphones, large scene floor...\"\r\n                 size={50} value={this.state.technicalrequirements} onChange={this.handleChange}/></td>\r\n                <td> <input name=\"rider\" type=\"text\" placeholder=\"64 ice cold beers, 128 Snickers bars\"\r\n                value={this.state.rider} onChange={this.handleChange}/></td> \r\n                <td> <button onClick={() => this.checkAccept(\r\n                        this.state.artist,\r\n                        this.state.name,\r\n                        this.state.scene,\r\n                        this.state.sceneDisplay,\r\n                        this.state.date,\r\n                        this.state.time,\r\n                        this.state.price,\r\n                        this.state.requestKey,\r\n                        this.state.technicalrequirements,\r\n                        this.state.rider,\r\n                        \r\n                    )}> Accept </button>\r\n                    \r\n                    <button onClick={() => this.decline(\r\n                        this.state.artist,\r\n                        this.state.requestKey\r\n                        )}> Decline </button>\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/managerequest/ManageRequest.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "class",
    "name": "ManageRequest",
    "memberof": "src/components/managerequest/ManageRequest.js",
    "static": true,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/managerequest/ManageRequest.js",
    "importStyle": "ManageRequest",
    "description": "Component used to show a request to manager",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 143,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"requestKey\": *, \"artist\": *, \"scene\": *, \"name\": *, \"date\": *, \"time\": *, \"price\": *, \"technicalrequirements\": *, \"rider\": *, \"dateDisplay\": *, \"timeDisplay\": *, \"sceneDisplay\": *}"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "checkAccept",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#checkAccept",
    "access": "public",
    "description": "Checks if input fields are empty and asks for confirmation to submute empty rider and techSpecs.\nThen passes information on to this.accept()",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "artist",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneDisplay",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "price",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "technicalrequirements",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rider",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "accept",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#accept",
    "access": "public",
    "description": "Updates database according to accept",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "artist",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sceneDisplay",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "time",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "price",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "technicalrequirements",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rider",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "decline",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#decline",
    "access": "public",
    "description": "Updates database according to decline",
    "lineNumber": 113,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "artist",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/managerequest/ManageRequest.js~ManageRequest",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/managerequest/ManageRequest.js~ManageRequest#render",
    "access": "public",
    "description": "Renders a table row with request info",
    "lineNumber": 127,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "file",
    "name": "src/components/navbar/navbar.js",
    "content": "import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './navbar.css';\r\nimport logo from '../../static/img/festival.png'\r\n\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n// Firebase\r\nimport database, {firebaseApp} from '../../database';\r\n\r\n/**\r\n * Component used to show Navbar\r\n */\r\nexport default class NavComponent extends Component {\r\n\r\n    /**\r\n     * Initializes state and which links belong to which role\r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user: props.user,\r\n            username: props.username,\r\n            viewableLinks: [],\r\n            loginOptions: [],\r\n        }\r\n\r\n        this.adminLinks = [\r\n            <Link key=\"setup\" className=\"nav-link\" to='/setup'>Setup</Link>,\r\n            <Link key=\"technicians\" className=\"nav-link\" to='/technicians'>Technicians</Link>,\r\n            <Link key=\"concerts\" className=\"nav-link\" to='/concerts'>Concerts</Link>,\r\n            <Link key=\"search\" className=\"nav-link\" to='/search'>Artist Search</Link>,\r\n            <Link key=\"artists\" className=\"nav-link\" to='/artists'>My Artists</Link>,\r\n            <Link key=\"bandbooking\" className=\"nav-link\" to='/bandbooking'>Confirm Booking</Link>,\r\n            <Link key=\"banddatabase\" className=\"nav-link\" to='/banddatabase'>Previous Concerts</Link>,\r\n            <Link key=\"pricecalculator\" className=\"nav-link\" to='/pricecalculator'>Ticket Price Calculator</Link>,\r\n            <Link key=\"manager\" className=\"nav-link\" to='/manager'>Manager</Link>,\r\n            <Link key=\"admin\" className=\"nav-link\" to='/admin'>Admin</Link>,\r\n            \r\n        ]\r\n        \r\n        this.organizerLinks = [\r\n            <Link key=\"setup\" className=\"nav-link\" to='/setup'>Setup</Link>,\r\n            <Link key=\"technicians\" className=\"nav-link\" to='/technicians'>Technicians</Link>,\r\n            <Link key=\"concerts\" className=\"nav-link\" to='/concerts'>Concerts</Link>,\r\n            \r\n        ]\r\n\r\n        this.managerLinks = [\r\n            <Link key=\"manager\" className=\"nav-link\" to='/manager'>My Concert Offers</Link>,\r\n        ]\r\n        \r\n        this.technicianLinks = [\r\n            <Link key=\"concerts\" className=\"nav-link\" to='/concerts'>Concerts</Link>,\r\n        ]\r\n        this.bookingResponsibleLinks = [\r\n            <Link key=\"search\" className=\"nav-link\" to='/search'>Artist Search</Link>,\r\n            <Link key=\"artists\" className=\"nav-link\" to='/artists'>My Artists</Link>,\r\n            <Link key=\"bandbookingresponsible\" className=\"nav-link\" to='/bandbookingresponsible'>Book Artist</Link>,\r\n            <Link key=\"banddatabase\" className=\"nav-link\" to='/banddatabase'>Previous Concerts</Link>,            \r\n            <Link key=\"pricecalculator\" className=\"nav-link\" to='/pricecalculator'>Ticket Price Calculator</Link>,\r\n        ]\r\n        this.bookingBossLinks = [\r\n            <Link key=\"search\" className=\"nav-link\" to='/search'>Artist Search</Link>,\r\n            <Link key=\"artists\" className=\"nav-link\" to='/artists'>My Artists</Link>,\r\n            <Link key=\"bandbooking\" className=\"nav-link\" to='/bandbooking'>Confirm Booking</Link>,\r\n            <Link key=\"banddatabase\" className=\"nav-link\" to='/banddatabase'>Previous Concerts</Link>,            \r\n            <Link key=\"pricecalculator\" className=\"nav-link\" to='/pricecalculator'>Ticket Price Calculator</Link>,\r\n        ]\r\n\r\n        \r\n        this.exit = this.exit.bind(this) //exit and go to festival selection page        \r\n    }\r\n\r\n    /**\r\n     * React method that fires when the component is rendered.\r\n     * Here used to get login options from database and call this.getCorrectNav()\r\n     */\r\n    componentDidMount() {\r\n        var previousLoginOptions = this.state.loginOptions\r\n        database.ref('users').orderByChild('displayName').once('value', usersSnapshot => {\r\n            usersSnapshot.forEach(userSnapshot => {\r\n              previousLoginOptions.push(\r\n                <option id=\"dropdownItem\" onClick={this.changeUser} value={userSnapshot.val().email} key={userSnapshot.key}> {userSnapshot.val().displayName} </option> \r\n              )\r\n            })\r\n          }).then(() => {\r\n            this.setState({\r\n              loginOptions: previousLoginOptions,\r\n              viewableLinks: this.getCorrectNav(),\r\n            })\r\n          })\r\n    }\r\n\r\n    /**\r\n     * Here used to be certain certain fields are updated when receiving new props.\r\n     * For some reason this is needed here. \r\n     * @param {props} nextProps \r\n     */\r\n    componentWillReceiveProps(nextProps) {\r\n\r\n        this.setState({\r\n            user: nextProps.user,\r\n            username: nextProps.username,\r\n            viewableLinks: this.getCorrectNav(nextProps.user)\r\n        })\r\n\r\n    }\r\n\r\n    // Om den ikke mottar user, bruk this.state.user\r\n    /**\r\n     * Sets viewable links based on role passed into the method.\r\n     * If no role passed, try to use the one in current state\r\n     * @param {*} user \r\n     */\r\n    getCorrectNav(user = this.state.user) {\r\n        if (user !== null) {\r\n            var previousViewableLinks = this.state.viewableLinks;\r\n            var displayName = user.email.split('@')[0]\r\n            \r\n            switch(displayName){\r\n    \r\n                case \"manager\":\r\n                    previousViewableLinks = this.managerLinks\r\n                    break;\r\n    \r\n                case \"admin\":\r\n                    previousViewableLinks = this.adminLinks\r\n                    break;\r\n\r\n                case \"organizer\":\r\n                    previousViewableLinks = this.organizerLinks\r\n                    break;\r\n                \r\n                case \"tekniker\":\r\n                    previousViewableLinks = this.technicianLinks\r\n                    break;\r\n    \r\n                case \"booking.manager\":\r\n                    previousViewableLinks = this.bookingBossLinks\r\n                    break;\r\n\r\n                case \"booking.responsible\":\r\n                    previousViewableLinks = this.bookingResponsibleLinks\r\n                    break;\r\n    \r\n                default:\r\n                    previousViewableLinks = []\r\n                    break;\r\n            }\r\n            return previousViewableLinks\r\n        } else {\r\n            return []\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls function one layer up\r\n     */\r\n    exit(){\r\n        this.props.exit();\r\n    }\r\n\r\n    /**\r\n     * Changes user based on event.target.value.\r\n     * Called from dropdown menu.\r\n     */\r\n    changeUser = event => {\r\n        event.preventDefault();\r\n    \r\n        // Logg inn med epost fra dropdown og passord festival (som er passordet til alle brukere jeg har lagt inn)\r\n        firebaseApp.auth().signInWithEmailAndPassword(event.target.value, \"festival\")\r\n        .then((user) => {\r\n          console.log(\"Signed In as\", user)\r\n          this.setState({\r\n            errorCode:null, \r\n            errorMessage:null,\r\n          })\r\n    \r\n        })\r\n        .catch(error => {\r\n          this.handleError(error);\r\n        })\r\n    \r\n      }\r\n\r\n    /**\r\n     * Renders the navbar with current festival, viewable links, login options, and exit button\r\n     */\r\n    render() {\r\n        var loggedInAs = \"Not logged in\"\r\n        var festivalName = this.props.festivalName\r\n\r\n        return(\r\n            <nav className=\"navbar navbar-expand-lg fixed-top navbar-dark bg-dark\">\r\n                 <a id=\"exitFestivalButton\" href=\"#\" onClick={this.exit}>X</a>\r\n                 <Link className=\"navbar-brand\" key=\"home\" to='/home'>{festivalName}</Link>\r\n               \r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#festivalNavbar\" aria-controls=\"festivalNavbar\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"festivalNavbar\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        {\r\n                            this.state.viewableLinks.map(link => {\r\n                                var navLinkCss = \"nav-item\"\r\n                                if (link.props.to === window.location.pathname) {\r\n                                    navLinkCss = \"nav-item active\"                                    \r\n                                }\r\n                                return (\r\n                                    <li className={navLinkCss}>\r\n                                        {link}\r\n                                    </li>\r\n                                )\r\n                            })\r\n                        }\r\n                        \r\n                    </ul>\r\n                    <ul className=\"navbar-nav ml-auto\">\r\n                        <li className=\"nav-item dropdown\">\r\n                            <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                                {this.state.username}\r\n                            </a>\r\n                            <div id=\"navDropdown\" className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                                {this.state.loginOptions}\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n\r\n            </nav>\r\n            \r\n        )\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/navbar/navbar.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 155,
    "kind": "class",
    "name": "NavComponent",
    "memberof": "src/components/navbar/navbar.js",
    "static": true,
    "longname": "src/components/navbar/navbar.js~NavComponent",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/navbar/navbar.js",
    "importStyle": "NavComponent",
    "description": "Component used to show Navbar",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 156,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#constructor",
    "access": "public",
    "description": "Initializes state and which links belong to which role",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 157,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#state",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"user\": *, \"username\": *, \"viewableLinks\": *, \"loginOptions\": *}"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "adminLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#adminLinks",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "organizerLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#organizerLinks",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "managerLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#managerLinks",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "technicianLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#technicianLinks",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "bookingResponsibleLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#bookingResponsibleLinks",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "bookingBossLinks",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#bookingBossLinks",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#componentDidMount",
    "access": "public",
    "description": "React method that fires when the component is rendered.\nHere used to get login options from database and call this.getCorrectNav()",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#componentWillReceiveProps",
    "access": "public",
    "description": "Here used to be certain certain fields are updated when receiving new props.\nFor some reason this is needed here. ",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "getCorrectNav",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#getCorrectNav",
    "access": "public",
    "description": "Sets viewable links based on role passed into the method.\nIf no role passed, try to use the one in current state",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "user",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "exit",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#exit",
    "access": "public",
    "description": "Calls function one layer up",
    "lineNumber": 161,
    "params": [],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "changeUser",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#changeUser",
    "access": "public",
    "description": "Changes user based on event.target.value.\nCalled from dropdown menu.",
    "lineNumber": 169,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/navbar/navbar.js~NavComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/navbar/navbar.js~NavComponent#render",
    "access": "public",
    "description": "Renders the navbar with current festival, viewable links, login options, and exit button",
    "lineNumber": 191,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 171,
    "kind": "file",
    "name": "src/components/programdays/ProgramDays.js",
    "content": "import React, {Component } from 'react'\r\n\r\nimport './programdays.css';\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used on HomePage to render headers in table\r\n */\r\nexport default class ProgramDays extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = { \r\n            festival:props.festival,\r\n            date:props.date,\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Keeps state updated\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    /**\r\n     * Renders a table heading based on this.state.date\r\n     */\r\n    render() {\r\n        return (\r\n            <th id=\"programDay\">{this.state.date}</th>\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/programdays/ProgramDays.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 172,
    "kind": "class",
    "name": "ProgramDays",
    "memberof": "src/components/programdays/ProgramDays.js",
    "static": true,
    "longname": "src/components/programdays/ProgramDays.js~ProgramDays",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/programdays/ProgramDays.js",
    "importStyle": "ProgramDays",
    "description": "Component used on HomePage to render headers in table",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/programdays/ProgramDays.js~ProgramDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programdays/ProgramDays.js~ProgramDays#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/programdays/ProgramDays.js~ProgramDays",
    "static": false,
    "longname": "src/components/programdays/ProgramDays.js~ProgramDays#state",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"date\": *}"
      ]
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/programdays/ProgramDays.js~ProgramDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programdays/ProgramDays.js~ProgramDays#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/programdays/ProgramDays.js~ProgramDays",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programdays/ProgramDays.js~ProgramDays#render",
    "access": "public",
    "description": "Renders a table heading based on this.state.date",
    "lineNumber": 35,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/components/programslots/ProgramSlots.js",
    "content": "import React, {Component } from 'react'\r\n\r\nimport './programslots.css';\r\nimport database from '../../database' //firebase\r\nimport ConcertProgram from '../concertprogram/ConcertProgram'\r\n\r\n/**\r\n * Component used to show concert program\r\n */\r\nexport default class ProgramSlots extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = { \r\n            festival:props.festival,\r\n            date:props.date,\r\n            slots:[],\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Pulls program from database based on current festival and date.\r\n     */\r\n    componentWillMount() {\r\n        let prevSlots = this.state.slots\r\n        \r\n            database.ref(this.state.festival).child('program').child(this.state.date).child('slots').on('child_added', snap => {\r\n              var vals = snap.val();\r\n              \r\n              prevSlots.push({\r\n                id: snap.key,\r\n                start: vals.start,\r\n                end:vals.end,\r\n                concert:vals.concert,\r\n              })\r\n        \r\n              this.setState({\r\n                slots: prevSlots,\r\n              })\r\n            })\r\n            \r\n       \r\n      }\r\n\r\n    /**\r\n     * Keeps state updated\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n          }\r\n        );\r\n      }\r\n\r\n    \r\n    /**\r\n     * Renders concert program for each slot\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n            \r\n            {this.state.slots.map((slot) => {\r\n                return(\r\n                <div id=\"concertSlot\">\r\n                    <ConcertProgram festival={this.state.festival} concert={slot.concert} startTime={slot.start} endTime={slot.end} />\r\n                </div>)\r\n            })\r\n            }\r\n            \r\n            \r\n            </div>\r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/programslots/ProgramSlots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "class",
    "name": "ProgramSlots",
    "memberof": "src/components/programslots/ProgramSlots.js",
    "static": true,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/programslots/ProgramSlots.js",
    "importStyle": "ProgramSlots",
    "description": "Component used to show concert program",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 179,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "static": false,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"date\": *, \"slots\": *}"
      ]
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots#componentWillMount",
    "access": "public",
    "description": "Pulls program from database based on current festival and date.",
    "lineNumber": 26,
    "params": [],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/programslots/ProgramSlots.js~ProgramSlots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/programslots/ProgramSlots.js~ProgramSlots#render",
    "access": "public",
    "description": "Renders concert program for each slot",
    "lineNumber": 62,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 184,
    "kind": "file",
    "name": "src/components/scenelist/SceneList.js",
    "content": "import React, {Component } from 'react'\r\nimport './scenelist.css';\r\n\r\nimport database from '../../database' //firebase\r\n\r\n/**\r\n * Component used to show a scene in a table row\r\n */\r\nexport default class SceneList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival: props.festival,\r\n            name: props.name,\r\n            capacity: props.capacity,\r\n            cost: props.cost,\r\n            key: props.id,\r\n            deleted: false, //nice way to hide deleted elements\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Deletes a scene from the database\r\n     * @param {firebase.database.Reference.key} key \r\n     */\r\n    delete(key){\r\n        if(window.confirm(\"Are you sure you want to remove the scene?\\n\\nRemoving a scene from a festival will affect all concerts on that day\")){\r\n            database.ref(this.state.festival).child('scenes').child(key).remove()\r\n            this.setState({\r\n            deleted: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Renders a table row containing scene information\r\n     */\r\n    render() {\r\n\r\n        if(this.state.deleted){ //nice way to hide deleted elements\r\n           return(null)\r\n        }\r\n        return (\r\n            <tr>\r\n                <td> {this.state.name} </td>\r\n                <td> {this.state.capacity} </td>\r\n                <td> {this.state.cost} </td>\r\n                <td> <button className=\"removeX\" onClick={() => this.delete(\r\n                        this.state.key\r\n                    )}> X </button>\r\n                </td>\r\n            </tr>\r\n\r\n        )\r\n    }\r\n    \r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/scenelist/SceneList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 185,
    "kind": "class",
    "name": "SceneList",
    "memberof": "src/components/scenelist/SceneList.js",
    "static": true,
    "longname": "src/components/scenelist/SceneList.js~SceneList",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/scenelist/SceneList.js",
    "importStyle": "SceneList",
    "description": "Component used to show a scene in a table row",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 186,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/scenelist/SceneList.js~SceneList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/scenelist/SceneList.js~SceneList#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/scenelist/SceneList.js~SceneList",
    "static": false,
    "longname": "src/components/scenelist/SceneList.js~SceneList#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"name\": *, \"capacity\": *, \"cost\": *, \"key\": *, \"deleted\": *}"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "delete",
    "memberof": "src/components/scenelist/SceneList.js~SceneList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/scenelist/SceneList.js~SceneList#delete",
    "access": "public",
    "description": "Deletes a scene from the database",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/scenelist/SceneList.js~SceneList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/scenelist/SceneList.js~SceneList#render",
    "access": "public",
    "description": "Renders a table row containing scene information",
    "lineNumber": 39,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/components/slots/Slots.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport './slots.css';\r\n\r\n/**\r\n * Component used to show a slot\r\n */\r\nexport default class Slots extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            festival:props.festival,\r\n            start:props.start,\r\n            end:props.end,\r\n            key:props.id,\r\n            dayKey:props.dayKey,\r\n            deleted: false,\r\n           \r\n\r\n        }\r\n        this.removeSlot = this.removeSlot.bind(this)\r\n    }\r\n\r\n    /**\r\n     * Removes a slot from the database\r\n     * @param {firebase.database.Reference.key} key \r\n     */\r\n    removeSlot(key){\r\n        if(window.confirm(\"Are you sure you want to remove this timeslot?\\n\\nRemoving a timeslot from a festival will affect all concerts on that timeslot\")){\r\n        database.ref(this.state.festival).child('program').child(this.state.dayKey).child(\"slots\").child(key).remove()\r\n        \r\n        this.setState({\r\n            deleted:true,\r\n          })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Renders a table row showing a slot \r\n     */\r\n    render() {\r\n\r\n        if(this.state.deleted){ //nice way to hide deleted elements\r\n           return(null)\r\n        }\r\n\r\n        return (\r\n            \r\n            \r\n                <tr>\r\n                    <td>\r\n                        {this.state.start}-{this.state.end}\r\n                    </td>\r\n\r\n                    <td>\r\n                        <button className=\"removeX\" onClick={() => this.removeSlot(\r\n                                    this.state.key\r\n                        )}>X</button>\r\n                    </td>\r\n                </tr>\r\n                \r\n    \r\n            \r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/slots/Slots.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "Slots",
    "memberof": "src/components/slots/Slots.js",
    "static": true,
    "longname": "src/components/slots/Slots.js~Slots",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/slots/Slots.js",
    "importStyle": "Slots",
    "description": "Component used to show a slot",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/slots/Slots.js~Slots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/slots/Slots.js~Slots#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/slots/Slots.js~Slots",
    "static": false,
    "longname": "src/components/slots/Slots.js~Slots#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"festival\": *, \"start\": *, \"end\": *, \"key\": *, \"dayKey\": *, \"deleted\": *}"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "removeSlot",
    "memberof": "src/components/slots/Slots.js~Slots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/slots/Slots.js~Slots#removeSlot",
    "access": "public",
    "description": "Removes a slot from the database",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/slots/Slots.js~Slots",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/slots/Slots.js~Slots#render",
    "access": "public",
    "description": "Renders a table row showing a slot ",
    "lineNumber": 47,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/components/technicianslist/TechniciansList.js",
    "content": "import React, {Component } from 'react'\r\n\r\n\r\nimport database from '../../database' //firebase\r\n\r\nimport './technicianslist.css';\r\n\r\n/**\r\n * Component used to show a technician name in a div?\r\n */\r\nexport default class TechniciansList extends Component {\r\n\r\n    /**\r\n     * Sets state\r\n     * @param {props} props \r\n     */\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            techName: props.name,\r\n\r\n        }\r\n       \r\n    }\r\n\r\n\r\n    \r\n\r\n\r\n\r\n    /**\r\n     * Renders a div containing the name of technician\r\n     */\r\n    render() {\r\n\r\n\r\n        return (\r\n            \r\n            <div>{this.state.techName}</div>\r\n    \r\n    \r\n            \r\n        )\r\n    }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/components/technicianslist/TechniciansList.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "TechniciansList",
    "memberof": "src/components/technicianslist/TechniciansList.js",
    "static": true,
    "longname": "src/components/technicianslist/TechniciansList.js~TechniciansList",
    "access": "public",
    "export": true,
    "importPath": "app/src/components/technicianslist/TechniciansList.js",
    "importStyle": "TechniciansList",
    "description": "Component used to show a technician name in a div?",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/technicianslist/TechniciansList.js~TechniciansList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/technicianslist/TechniciansList.js~TechniciansList#constructor",
    "access": "public",
    "description": "Sets state",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "props"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "state",
    "memberof": "src/components/technicianslist/TechniciansList.js~TechniciansList",
    "static": false,
    "longname": "src/components/technicianslist/TechniciansList.js~TechniciansList#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"techName\": *}"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "render",
    "memberof": "src/components/technicianslist/TechniciansList.js~TechniciansList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/technicianslist/TechniciansList.js~TechniciansList#render",
    "access": "public",
    "description": "Renders a div containing the name of technician",
    "lineNumber": 34,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "src/database.js",
    "content": "import firebase from 'firebase';\r\n\r\n/**\r\n * Config variable for firebase\r\n */\r\nvar config = {\r\n    apiKey: \"AIzaSyDaYpDvWOMu9LYsbtewVfYinKjdF-TArvc\",\r\n    authDomain: \"festival-180609.firebaseapp.com\",\r\n    databaseURL: \"https://festival-180609.firebaseio.com\",\r\n    projectId: \"festival-180609\",\r\n    storageBucket: \"festival-180609.appspot.com\",\r\n    messagingSenderId: \"587187428094\"\r\n}\r\n\r\n/**\r\n * Reference to firebaseApp, used for Auth and database in this app\r\n */\r\nconst firebaseApp = firebase.initializeApp(config);\r\n/**\r\n * Reference to firebase database.\r\n */\r\nconst database = firebaseApp.database();\r\n\r\nexport default database;\r\nexport {firebaseApp};\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/database.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "variable",
    "name": "config",
    "memberof": "src/database.js",
    "static": true,
    "longname": "src/database.js~config",
    "access": "public",
    "export": false,
    "importPath": "app/src/database.js",
    "importStyle": null,
    "description": "Config variable for firebase",
    "lineNumber": 6,
    "type": {
      "types": [
        "{\"apiKey\": string, \"authDomain\": string, \"databaseURL\": string, \"projectId\": string, \"storageBucket\": string, \"messagingSenderId\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "database",
    "memberof": "src/database.js",
    "static": true,
    "longname": "src/database.js~database",
    "access": "public",
    "export": true,
    "importPath": "app/src/database.js",
    "importStyle": "database",
    "description": "Reference to firebase database.",
    "lineNumber": 22,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "firebaseApp",
    "memberof": "src/database.js",
    "static": true,
    "longname": "src/database.js~firebaseApp",
    "access": "public",
    "export": true,
    "importPath": "app/src/database.js",
    "importStyle": "{firebaseApp}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/index.js",
    "content": "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport App from './App';\r\n\r\n// Prøver ut React-Router (V4)\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App/>\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "file",
    "name": "src/pages/adminpage/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\n\r\nimport './style.css';\r\n\r\n\r\n//Firebase\r\nimport database from '../../database'\r\n//region\r\n/**\r\n * Component used to render the admin page.\r\n */\r\nexport default class AdminPage extends Component {\r\n//endregion\r\n  constructor(props) {\r\n    super(props);\r\n   \r\n\r\n    this.state = {\r\n      \r\n      // User form\r\n      selectedRole: \"\",\r\n      selectedUser: \"\",\r\n      userOptions: [],\r\n      roleOptions: [\r\n        <option value=\"admin\" key=\"admin\">admin</option>,\r\n        <option value=\"servering\" key=\"servering\">servering</option>,\r\n        <option value=\"band\" key=\"band\">band</option>,\r\n        <option value=\"booking-responsible\" key=\"bookingansvarlig\">bookingansvarlig</option>,\r\n        <option value=\"booking-manager\" key=\"bookingsjef\">bookingsjef</option>,\r\n        <option value=\"tekniker\" key=\"tekniker\">tekniker</option>,\r\n        <option value=\"manager\" key=\"manager\">manager</option>,\r\n        <option value=\"pr-ansvarlig\" key=\"pr-ansvarlig\">pr-ansvarlig</option>\r\n      ]\r\n    }\r\n\r\n\r\n\r\n    this.match = \"\";\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n    this.pushRole = this.pushRole.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Here used to pull users from database and create options for each.\r\n   */\r\n  componentWillMount() {\r\n    var previousUserOptions = this.state.userOptions;\r\n\r\n\r\n    database.ref('users').on('child_added', user => {\r\n      console.log(user.key)\r\n      previousUserOptions.push(\r\n        <option value={user.key} key={user.key}>{ user.val().displayName } </option>\r\n      )\r\n      this.setState({userOptions: previousUserOptions})\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Keeps state updated\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n\r\n \r\n\r\n  \r\n  /**\r\n   * Sets chosen role to chosen user. Does not remove old role(e)\r\n   * @param {event} e \r\n   */\r\n  pushRole(e) {\r\n    e.preventDefault();\r\n\r\n    if (this.state.selectedRole === \"booking-responsible\" || this.state.selectedRole === \"booking-manager\") {\r\n      database.ref('users').child(this.state.selectedUser).child(\"roles\").update({\r\n        [this.state.selectedRole]: true,\r\n        \"booking\": true,\r\n      })\r\n    } else {\r\n      database.ref('users').child(this.state.selectedUser).child(\"roles\").update({\r\n        [this.state.selectedRole]: true\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n\r\n\r\n  /**\r\n   * Renders a page with form to push selected role to a selected user. \r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      \r\n       \r\n\r\n        <form>\r\n          <h2> Give user permission </h2>\r\n          <select name=\"selectedUser\" onChange={this.handleChange} value={this.state.selectedUser}>\r\n            {this.state.userOptions}\r\n          </select>\r\n          <select name=\"selectedRole\" onChange={this.handleChange} value={this.state.selectedRole}>\r\n            {this.state.roleOptions}\r\n          </select>\r\n          <button onClick={this.pushRole}>Submit</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/adminpage/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 208,
    "kind": "class",
    "name": "AdminPage",
    "memberof": "src/pages/adminpage/index.js",
    "static": true,
    "longname": "src/pages/adminpage/index.js~AdminPage",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/adminpage/index.js",
    "importStyle": "AdminPage",
    "description": "Component used to render the admin page.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 209,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"selectedRole\": *, \"selectedUser\": *, \"userOptions\": *, \"roleOptions\": *}"
      ]
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "match",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#match",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#componentWillMount",
    "access": "public",
    "description": "Here used to pull users from database and create options for each.",
    "lineNumber": 48,
    "params": [],
    "return": null
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "pushRole",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#pushRole",
    "access": "public",
    "description": "Sets chosen role to chosen user. Does not remove old role(e)",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/adminpage/index.js~AdminPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/adminpage/index.js~AdminPage#render",
    "access": "public",
    "description": "Renders a page with form to push selected role to a selected user. ",
    "lineNumber": 103,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "src/pages/artists/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport database from '../../database'\r\n\r\nimport ArtistList from '../../components/artistlist/ArtistList'\r\n\r\n/**\r\n * Component used to render the Artists page\r\n */\r\nexport default class Artists extends Component {\r\n  // static propTypes = {}\r\n  // static defaultProps = {}\r\n  // state = {}\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      artists: [],\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  /**\r\n   * Here used to pull all artists in current festival from database\r\n   */\r\n  componentWillMount() {\r\n    var previousArtists = this.state.artists;\r\n\r\n\r\n    database.ref(this.props.state.festival).child('artists').on('child_added', snap => {\r\n      var vals = snap.val();\r\n\r\n      previousArtists.push({\r\n        id: snap.key,\r\n        name:vals.name,\r\n        followers:vals.followers,\r\n        popularity:vals.popularity,\r\n        genres:vals.genres,\r\n        reviews: vals.reviews,\r\n        status: vals.status,\r\n        uri: vals.uri,\r\n        \r\n      })\r\n\r\n      this.setState({\r\n        artists: previousArtists,\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Keeps state updated\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Renders a page with all the artists found in current festival.\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        \r\n        <h2>My Artists</h2>\r\n        \r\n        <div className=\"artistTable\">\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Followers</th>\r\n                  <th>Popularity (0-100)</th>\r\n                  <th>Genres</th>\r\n                  <th>Booked</th>\r\n                  <th>Listen</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {this.state.artists.map((artist) => {\r\n              return(<ArtistList\r\n                festival={this.props.state.festival}\r\n                name={artist.name}\r\n                followers={artist.followers}\r\n                popularity={artist.popularity}\r\n                genres={artist.genres}\r\n                reviews={artist.reviews}\r\n                status={artist.status}\r\n                uri={artist.uri}\r\n                id={artist.id} //kan ikke kalle den key fordi map har en egen key.\r\n               />\r\n              )\r\n            })\r\n            }\r\n                 \r\n            </tbody>\r\n          </table>\r\n        \r\n        \r\n        \r\n        </div>\r\n\r\n\r\n      </div>\r\n      \r\n    );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/artists/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "Artists",
    "memberof": "src/pages/artists/index.js",
    "static": true,
    "longname": "src/pages/artists/index.js~Artists",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/artists/index.js",
    "importStyle": "Artists",
    "description": "Component used to render the Artists page",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 220,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/artists/index.js~Artists",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/artists/index.js~Artists#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/artists/index.js~Artists",
    "static": false,
    "longname": "src/pages/artists/index.js~Artists#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"artists\": *}"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/artists/index.js~Artists",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/artists/index.js~Artists#componentWillMount",
    "access": "public",
    "description": "Here used to pull all artists in current festival from database",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/artists/index.js~Artists",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/artists/index.js~Artists#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/artists/index.js~Artists",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/artists/index.js~Artists#render",
    "access": "public",
    "description": "Renders a page with all the artists found in current festival.",
    "lineNumber": 70,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "file",
    "name": "src/pages/bandbooking/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport database from '../../database'\r\n\r\n/**\r\n * Component used to render Band booking site for booking boss\r\n */\r\nexport default class BandBooking extends Component {\r\n  // static propTypes = {}\r\n  // static defaultProps = {}\r\n  // state = {}\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let artistMap = new Map();\r\n    let sceneMap = new Map();\r\n    let dateMap = new Map();\r\n    let timeMap = new Map();\r\n    this.state = {\r\n\r\n      artists: [],\r\n      artistOptions: [],\r\n      selectedArtist:\"\",\r\n      artistMap: artistMap, //for keeping name of artist and be able to get it by key\r\n\r\n      currentArtistNameInput: \"\",\r\n      currentPriceInput: \"\",\r\n      \r\n      \r\n      sceneOptions: [],\r\n      selectedScene:\"\",\r\n\r\n      dayOptions: [],\r\n      selectedDay:\"\",\r\n\r\n      timeOptions: [],\r\n      selectedTime:\"\",\r\n\r\n      sceneMap: sceneMap, //to get name of scenes by key\r\n      dateMap: dateMap, //to get date/day by key\r\n      timeMap: timeMap, //to get time by key\r\n      \r\n\r\n      requests: [],\r\n      currentArtistAccepted: \"ARTISTACCEPTED\",\r\n      currentPriceAccepted: \"\",\r\n      currentConcertDayAccepted: \"day1\",\r\n      email: \"Hei <name>!\\nVi vil gjerne invitere <artist> til å spille på festival17 på <dag>.\\nPris: <pris>.\\n\\nMvh\\n   bookingansvarlig\"\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmitRequest = this.handleSubmitRequest.bind(this);\r\n    this.handleAccept = this.handleAccept.bind(this);\r\n    this.handleDecline = this.handleDecline.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleChangeDay = this.handleChangeDay.bind(this);\r\n    \r\n  }\r\n\r\n  /**\r\n   * Pulls requests, scenes and artists from database based on current festival\r\n   */\r\n  componentWillMount() {\r\n    var previousRequests = this.state.requests;\r\n    console.log(previousRequests);\r\n\r\n    //get requests from database\r\n    database.ref(this.props.state.festival).child('requests').on('child_added', requestSnapshot => {\r\n      var vals = requestSnapshot.val();\r\n      previousRequests.push({\r\n        artist:vals.artist,\r\n        price:vals.price,\r\n        scene:vals.scene,\r\n        date:vals.date,\r\n        time:vals.time,\r\n        status:vals.status, //Kan ha tre tilstander: pending, accepted eller declined.\r\n        key: requestSnapshot.key\r\n      })\r\n      this.setState({\r\n        requests: previousRequests,\r\n      })\r\n    })\r\n\r\n    let previousArtistMap = this.state.artistMap;\r\n    \r\n\r\n    let previousArtists = this.state.artists;\r\n\r\n    let previousArtistsOptions = this.state.artistOptions;\r\n\r\n    //get artists from database\r\n    database.ref(this.props.state.festival).child('artists').on('child_added', snap => {\r\n      let vals = snap.val();\r\n      let marker = \"\";\r\n      if(vals.status != \"pending\"){ //not able to send requests to artist that have a pending request\r\n          previousArtists.push({\r\n            id: snap.key,\r\n            name:vals.name,\r\n            followers:vals.followers,\r\n            popularity:vals.popularity,\r\n            genres:vals.genres,\r\n            reviews: vals.reviews, \r\n            uri: vals.uri,\r\n            \r\n          })\r\n      \r\n          \r\n          if(vals.status === \"declined\"){marker = \"**\"}//mark artists that have declined a previous offer.\r\n          if(vals.status === \"booked\"){marker = \"*\"}//mark artists that are already booked for a concert.\r\n\r\n          //push artists into an array of options elements\r\n          previousArtistsOptions.push(\r\n            <option value={snap.key} key={snap.key}> {vals.name}{marker} </option>\r\n          )\r\n\r\n          this.setState({\r\n            artistOptions: previousArtistsOptions,\r\n            selectedArtist: previousArtistsOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n          })\r\n        \r\n      }\r\n      \r\n      //push name and key into a map\r\n      previousArtistMap.set(snap.key, vals.name);\r\n      \r\n\r\n      this.setState({\r\n        artists: previousArtists,\r\n        artistMap: previousArtistMap,\r\n        \r\n      })\r\n    \r\n    })\r\n\r\n      //Create Scene Select Options \r\n    let prevSceneOptions = this.state.sceneOptions;\r\n    let prevSceneMap = this.state.sceneMap;\r\n      \r\n        //get scenes from database\r\n        database.ref(this.props.state.festival).child('scenes').on('child_added', snap => {\r\n            var vals = snap.val();\r\n            \r\n            prevSceneMap.set(snap.key, vals.name) //map to get name of scene from key\r\n      \r\n            prevSceneOptions.push(\r\n              <option value={snap.key} key={snap.key}> {vals.name} ({vals.capacity}) </option>\r\n            )\r\n            this.setState({\r\n              sceneOptions: prevSceneOptions,\r\n              selectedScene: prevSceneOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n              sceneMap: prevSceneMap,\r\n            })\r\n        })\r\n      \r\n      let prevDayOptions = this.state.dayOptions;\r\n      let prevDateMap = this.state.dateMap;\r\n      let prevTimeMap = this.state.timeMap;\r\n        \r\n          //get days from database\r\n          database.ref(this.props.state.festival).child('program').on('child_added', snap => {\r\n              \r\n              //Add the times to the times map to get them by key\r\n                database.ref(this.props.state.festival).child('program').child(snap.key).child(\"slots\").on('child_added', time => {\r\n                      prevTimeMap.set(time.key, time.val().start + \"-\" + time.val().end)\r\n                      console.log(time.val().start)\r\n                      this.setState({\r\n                        timeMap: prevTimeMap\r\n                      })\r\n                  })\r\n              \r\n              var vals = snap.val();\r\n\r\n              prevDateMap.set(snap.key, vals.date) //map to get dates by key\r\n\r\n              prevDayOptions.push(\r\n                <option value={snap.key} key={snap.key}> {vals.date} </option>\r\n              )\r\n              this.setState({\r\n                dayOptions: prevDayOptions,\r\n                selectedDay: prevDayOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n                dateMap: prevDateMap,\r\n              })\r\n\r\n\r\n              \r\n\r\n          })\r\n\r\n          \r\n\r\n      \r\n      \r\n   \r\n  }\r\n\r\n  /**\r\n   * Pulls available timeslots from database\r\n   */\r\n  componentDidMount(){\r\n    if (! this.state.selectedDay) {\r\n      return\r\n    }\r\n\r\n    let prevTimeOptions = [];\r\n        //get times from database\r\n        database.ref(this.props.state.festival).child('program').child(this.state.selectedDay).child(\"slots\").on('child_added', snap => {\r\n            var vals = snap.val();\r\n\r\n           \r\n      \r\n            prevTimeOptions.push(\r\n              <option value={snap.key} key={snap.key}>{vals.start}-{vals.end}</option>\r\n            )\r\n            this.setState({\r\n              timeOptions: prevTimeOptions,\r\n              selectedTime: prevTimeOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n            })\r\n        })\r\n    \r\n\r\n  }\r\n  \r\n  /**\r\n   * Keeps state updated\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  //We need a seperate function when a state change is dependent on another state change,\r\n  //since state is not not necessarily a synchronous operation\r\n  //see: https://stackoverflow.com/questions/41043419/reactjs-onclick-state-change-one-step-behind\r\n  //I solved it by getting the selectedDay variable directly and not depend on the state. Took some time to figure out...!\r\n  /**\r\n   * Handles change in day selected\r\n   * @param {event} e \r\n   */\r\n  handleChangeDay(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n\r\n    let selectedDay = e.target.value //note that this is not the state, because the state is not set so we can not depend on it when accessing the database\r\n\r\n    let prevTimeOptions = [];\r\n    \r\n            //get times from database\r\n            database.ref(this.props.state.festival).child('program').child(selectedDay).child(\"slots\").on('child_added', snap => {\r\n                var vals = snap.val();\r\n                console.log(vals.start, \"-\", vals.end)\r\n          \r\n                prevTimeOptions.push(\r\n                  <option value={snap.key} key={snap.key}>{vals.start}-{vals.end}</option>\r\n                )\r\n\r\n                this.setState({\r\n                  selectedTime: prevTimeOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n                  //Cannot be set outside the callback in case a scene has no timeslot. \r\n                  })\r\n               \r\n            })\r\n            this.setState({\r\n              timeOptions: prevTimeOptions, //must be set outside the snap callback in case a scene has no timeslots.\r\n            })\r\n            \r\n  }\r\n  \r\n\r\n  \r\n  /**\r\n   * Submits request, in other words pushing it into the database\r\n   * @param {event} e \r\n   */\r\n  handleSubmitRequest(e) {\r\n    e.preventDefault(); //prevents page from reloading\r\n\r\n    var data = {\r\n      artist: this.state.selectedArtist, //key of artist in firebase\r\n      price: this.state.currentPriceInput,\r\n      scene: this.state.selectedScene,\r\n      date: this.state.selectedDay,\r\n      time: this.state.selectedTime,\r\n      status: \"pending\",\r\n    }\r\n\r\n    //Push requesten inn i databasen\r\n    database.ref(this.props.state.festival).child(\"requests\").push(data)\r\n    database.ref(this.props.state.festival).child(\"artists\").child(this.state.selectedArtist).update({status: \"pending\"});\r\n    console.log(this.state.requests);\r\n  }\r\n\r\n  /**\r\n   * Sets the request in database as accepted.\r\n   * @param {request} request \r\n   */\r\n  handleAccept(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).update({status: \"accepted\"});\r\n\r\n    // Kan dette gjøres bedre?\r\n    var previousRequests = this.state.requests;\r\n    previousRequests.map(item => {\r\n      if (item === request) {\r\n        item.status = \"accepted\"\r\n      }\r\n    })\r\n    this.setState({\r\n      requests: previousRequests\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Sets the request in database as declined\r\n   * @param {request} request \r\n   */\r\n  handleDecline(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).update({status: \"declined\"});\r\n    database.ref(this.props.state.festival).child(\"artists\").child(request.artist).update({status: \"\"});\r\n\r\n    // Kan dette gjøres bedre?\r\n    var previousRequests = this.state.requests;\r\n    previousRequests.map(item => {\r\n      if (item === request) {\r\n        item.status = \"declined\"\r\n      }\r\n    })\r\n    this.setState({\r\n      requests: previousRequests\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * Removes the request from the database\r\n   * @param {request} request \r\n   */\r\n  handleDelete(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).remove();\r\n    this.setState({\r\n      // Fjerner request fra this.state.requests og rendrer tabellen på nytt. \r\n      // Dermed slipper vi å force page refresh\r\n      requests: this.state.requests.filter(item => item !== request)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Placeholder function; not used.\r\n   * @param {event} e \r\n   */\r\n  handleCopyEmail(e) {\r\n    e.preventDefault();\r\n    var copyText = this.state.email;\r\n    copyText.select();\r\n    document.execCommand(\"Copy\");\r\n  }\r\n\r\n  /**\r\n   * Renders the Band booking page\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        <h2>Send Booking Request</h2>\r\n        <p>* artist already booked for a concert<br></br>\r\n          ** artist declined a previous offer to play\r\n        </p>\r\n\r\n        <form>\r\n          \r\n          <select name=\"selectedArtist\" onChange={this.handleChange} value={this.state.selectedArtist}>\r\n            {this.state.artistOptions}\r\n          </select>\r\n          <input name=\"currentPriceInput\" type=\"number\" value={this.state.currentPriceInput} onChange={this.handleChange} placeholder=\"Price offer\" />\r\n          <select name=\"selectedScene\" value={this.state.selectedScene} onChange={this.handleChange}>\r\n              {this.state.sceneOptions}\r\n          </select>\r\n          <select name=\"selectedDay\" value={this.state.selectedDay} onChange={this.handleChangeDay}>\r\n              {this.state.dayOptions}\r\n          </select>\r\n          <select name=\"selectedTime\" value={this.state.selectedTime} onChange={this.handleChange} >\r\n              {this.state.timeOptions}\r\n          </select>\r\n          <button onClick={this.handleSubmitRequest}>Submit</button>\r\n        </form>\r\n\r\n        {/*Liste med requests til Bookingsjef som kan godkjennes, eller ikke godkjennes.*/}\r\n        <div className=\"requestsBody\">\r\n\r\n        <h2>Active Bookings</h2>\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Price</th>\r\n                  <th>Scene</th>\r\n                  <th>Date</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.requests.map((request) => {\r\n                if (request.status === \"pending\") {\r\n                    return(\r\n                    <tr className=\"pendingRequests\">\r\n                      <td>{this.state.artistMap.get(request.artist)}</td>\r\n                      <td>{request.price}</td>\r\n                      <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                      <td>{this.state.dateMap.get(request.date)} \r\n                          {\" \"}\r\n                          ({this.state.timeMap.get(request.time)})\r\n                      </td>\r\n                      <td>{request.status}</td>\r\n                      <td>\r\n                        <button onClick={() =>this.handleAccept(request)}> Accept </button>\r\n                        <button onClick={() =>this.handleDecline(request)}> Reject </button>\r\n                      </td>\r\n                    </tr>\r\n                    )\r\n                  }\r\n                if (request.status === \"accepted\") {\r\n                  return(\r\n                  <tr className=\"acceptedRequests\">\r\n                   <td>{this.state.artistMap.get(request.artist)}</td>\r\n                   <td>{request.price}</td>\r\n                   <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                   <td>{this.state.dateMap.get(request.date)} \r\n                       {\" \"}\r\n                       ({this.state.timeMap.get(request.time)})\r\n                   </td>\r\n                   <td>{request.status}</td>\r\n                   \r\n                 </tr>\r\n                 )\r\n                }\r\n              })\r\n\r\n              }\r\n            </tbody>\r\n          </table>\r\n        \r\n\r\n          <h2>Declined Requests</h2>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Price</th>\r\n                  <th>Scene</th>\r\n                  <th>Date</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"declinedRequests\">\r\n              {this.state.requests.map((request) => {\r\n                if (request.status === \"declined\") {\r\n                    return(\r\n                    <tr>\r\n                      <td>{this.state.artistMap.get(request.artist)}</td>\r\n                      <td>{request.price}</td>\r\n                      <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                      <td>{this.state.dateMap.get(request.date)} \r\n                          {\" \"}\r\n                          ({this.state.timeMap.get(request.time)})\r\n                      </td>\r\n                      <td>{request.status}</td>\r\n                      <td><button onClick={() =>this.handleDelete(request)}> Delete </button></td>\r\n                    </tr>\r\n                    )\r\n                  }\r\n                })\r\n\r\n              }\r\n            </tbody>\r\n          </table>\r\n\r\n          {/*For senere om en skal legge til email funksjon.\r\n          <div>\r\n          <h1> Generated email: </h1>\r\n          <textarea name=\"email\" value={this.state.email} onChange={this.handleChange} rows=\"10\" cols=\"60\"></textarea>\r\n          <button onClick={this.handleCopyEmail}>Copy Email</button>\r\n          </div> */}\r\n\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/bandbooking/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 227,
    "kind": "class",
    "name": "BandBooking",
    "memberof": "src/pages/bandbooking/index.js",
    "static": true,
    "longname": "src/pages/bandbooking/index.js~BandBooking",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/bandbooking/index.js",
    "importStyle": "BandBooking",
    "description": "Component used to render Band booking site for booking boss",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"artists\": *, \"artistOptions\": *, \"selectedArtist\": *, \"artistMap\": *, \"currentArtistNameInput\": *, \"currentPriceInput\": *, \"sceneOptions\": *, \"selectedScene\": *, \"dayOptions\": *, \"selectedDay\": *, \"timeOptions\": *, \"selectedTime\": *, \"sceneMap\": *, \"dateMap\": *, \"timeMap\": *, \"requests\": *, \"currentArtistAccepted\": string, \"currentPriceAccepted\": *, \"currentConcertDayAccepted\": string, \"email\": string}"
      ]
    }
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#componentWillMount",
    "access": "public",
    "description": "Pulls requests, scenes and artists from database based on current festival",
    "lineNumber": 64,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#componentDidMount",
    "access": "public",
    "description": "Pulls available timeslots from database",
    "lineNumber": 200,
    "params": [],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleChange",
    "access": "public",
    "description": "Keeps state updated",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "handleChangeDay",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleChangeDay",
    "access": "public",
    "description": "Handles change in day selected",
    "lineNumber": 243,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "handleSubmitRequest",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleSubmitRequest",
    "access": "public",
    "description": "Submits request, in other words pushing it into the database",
    "lineNumber": 279,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "handleAccept",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleAccept",
    "access": "public",
    "description": "Sets the request in database as accepted.",
    "lineNumber": 301,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "handleDecline",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleDecline",
    "access": "public",
    "description": "Sets the request in database as declined",
    "lineNumber": 320,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "handleDelete",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleDelete",
    "access": "public",
    "description": "Removes the request from the database",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "handleCopyEmail",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#handleCopyEmail",
    "access": "public",
    "description": "Placeholder function; not used.",
    "lineNumber": 353,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/bandbooking/index.js~BandBooking",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbooking/index.js~BandBooking#render",
    "access": "public",
    "description": "Renders the Band booking page",
    "lineNumber": 363,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/pages/bandbookingresponsible/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport database from '../../database'\r\n\r\n/**\r\n * Slightly modified BandBooking, used to hide some controls from Booking Responsible\r\n */\r\nexport default class BandBookingResponsible extends Component {\r\n  // static propTypes = {}\r\n  // static defaultProps = {}\r\n  // state = {}\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    let artistMap = new Map();\r\n    let sceneMap = new Map();\r\n    let dateMap = new Map();\r\n    let timeMap = new Map();\r\n    this.state = {\r\n\r\n      artists: [],\r\n      artistOptions: [],\r\n      selectedArtist:\"\",\r\n      artistMap: artistMap, //for keeping name of artist and be able to get it by key\r\n\r\n      currentArtistNameInput: \"\",\r\n      currentPriceInput: \"\",\r\n      \r\n      \r\n      sceneOptions: [],\r\n      selectedScene:\"\",\r\n\r\n      dayOptions: [],\r\n      selectedDay:\"\",\r\n\r\n      timeOptions: [],\r\n      selectedTime:\"\",\r\n\r\n      sceneMap: sceneMap, //to get name of scenes by key\r\n      dateMap: dateMap, //to get date/day by key\r\n      timeMap: timeMap, //to get time by key\r\n      \r\n\r\n      requests: [],\r\n      currentArtistAccepted: \"ARTISTACCEPTED\",\r\n      currentPriceAccepted: \"\",\r\n      currentConcertDayAccepted: \"day1\",\r\n      email: \"Hei <name>!\\nVi vil gjerne invitere <artist> til å spille på festival17 på <dag>.\\nPris: <pris>.\\n\\nMvh\\n   bookingansvarlig\"\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmitRequest = this.handleSubmitRequest.bind(this);\r\n    this.handleAccept = this.handleAccept.bind(this);\r\n    this.handleDecline = this.handleDecline.bind(this);\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n    this.handleChangeDay = this.handleChangeDay.bind(this);\r\n    \r\n  }\r\n\r\n  //kjøres når siden/komponenten lastes\r\n  /**\r\n   * Pulls required information from the database\r\n   */\r\n  componentWillMount() {\r\n    var previousRequests = this.state.requests;\r\n    console.log(previousRequests);\r\n\r\n    //get requests from database\r\n    database.ref(this.props.state.festival).child('requests').on('child_added', requestSnapshot => {\r\n      var vals = requestSnapshot.val();\r\n      previousRequests.push({\r\n        artist:vals.artist,\r\n        price:vals.price,\r\n        scene:vals.scene,\r\n        date:vals.date,\r\n        time:vals.time,\r\n        status:vals.status, //Kan ha tre tilstander: pending, accepted eller declined.\r\n        key: requestSnapshot.key\r\n      })\r\n      this.setState({\r\n        requests: previousRequests,\r\n      })\r\n    })\r\n\r\n    let previousArtistMap = this.state.artistMap;\r\n    \r\n\r\n    let previousArtists = this.state.artists;\r\n\r\n    let previousArtistsOptions = this.state.artistOptions;\r\n\r\n    //get artists from database\r\n    database.ref(this.props.state.festival).child('artists').on('child_added', snap => {\r\n      let vals = snap.val();\r\n      let marker = \"\";\r\n      if(vals.status != \"pending\"){ //not able to send requests to artist that have a pending request\r\n          previousArtists.push({\r\n            id: snap.key,\r\n            name:vals.name,\r\n            followers:vals.followers,\r\n            popularity:vals.popularity,\r\n            genres:vals.genres,\r\n            reviews: vals.reviews, \r\n            uri: vals.uri,\r\n            \r\n          })\r\n      \r\n          \r\n          if(vals.status === \"declined\"){marker = \"**\"}//mark artists that have declined a previous offer.\r\n          if(vals.status === \"booked\"){marker = \"*\"}//mark artists that are already booked for a concert.\r\n\r\n          //push artists into an array of options elements\r\n          previousArtistsOptions.push(\r\n            <option value={snap.key} key={snap.key}> {vals.name}{marker} </option>\r\n          )\r\n\r\n          this.setState({\r\n            artistOptions: previousArtistsOptions,\r\n            selectedArtist: previousArtistsOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n          })\r\n        \r\n      }\r\n      \r\n      //push name and key into a map\r\n      previousArtistMap.set(snap.key, vals.name);\r\n      \r\n\r\n      this.setState({\r\n        artists: previousArtists,\r\n        artistMap: previousArtistMap,\r\n        \r\n      })\r\n    \r\n    })\r\n\r\n      //Create Scene Select Options \r\n    let prevSceneOptions = this.state.sceneOptions;\r\n    let prevSceneMap = this.state.sceneMap;\r\n      \r\n        //get scenes from database\r\n        database.ref(this.props.state.festival).child('scenes').on('child_added', snap => {\r\n            var vals = snap.val();\r\n            \r\n            prevSceneMap.set(snap.key, vals.name) //map to get name of scene from key\r\n      \r\n            prevSceneOptions.push(\r\n              <option value={snap.key} key={snap.key}> {vals.name} ({vals.capacity}) </option>\r\n            )\r\n            this.setState({\r\n              sceneOptions: prevSceneOptions,\r\n              selectedScene: prevSceneOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n              sceneMap: prevSceneMap,\r\n            })\r\n        })\r\n      \r\n      let prevDayOptions = this.state.dayOptions;\r\n      let prevDateMap = this.state.dateMap;\r\n      let prevTimeMap = this.state.timeMap;\r\n        \r\n          //get days from database\r\n          database.ref(this.props.state.festival).child('program').on('child_added', snap => {\r\n              \r\n              //Add the times to the times map to get them by key\r\n                database.ref(this.props.state.festival).child('program').child(snap.key).child(\"slots\").on('child_added', time => {\r\n                      prevTimeMap.set(time.key, time.val().start + \"-\" + time.val().end)\r\n                      console.log(time.val().start)\r\n                      this.setState({\r\n                        timeMap: prevTimeMap\r\n                      })\r\n                  })\r\n              \r\n              var vals = snap.val();\r\n\r\n              prevDateMap.set(snap.key, vals.date) //map to get dates by key\r\n\r\n              prevDayOptions.push(\r\n                <option value={snap.key} key={snap.key}> {vals.date} </option>\r\n              )\r\n              this.setState({\r\n                dayOptions: prevDayOptions,\r\n                selectedDay: prevDayOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n                dateMap: prevDateMap,\r\n              })\r\n\r\n\r\n              \r\n\r\n          })\r\n\r\n          \r\n\r\n      \r\n      \r\n   \r\n  }\r\n\r\n  /**\r\n   * Gets times from database based on selected festival and day\r\n   */\r\n  componentDidMount(){\r\n    let prevTimeOptions = [];\r\n        //get times from database\r\n        database.ref(this.props.state.festival).child('program').child(this.state.selectedDay).child(\"slots\").on('child_added', snap => {\r\n            var vals = snap.val();\r\n\r\n           \r\n      \r\n            prevTimeOptions.push(\r\n              <option value={snap.key} key={snap.key}>{vals.start}-{vals.end}</option>\r\n            )\r\n            this.setState({\r\n              timeOptions: prevTimeOptions,\r\n              selectedTime: prevTimeOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n            })\r\n        })\r\n    \r\n\r\n  }\r\n  \r\n  /**\r\n   * Keeps the state updated\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  //We need a seperate function when a state change is dependent on another state change,\r\n  //since state is not not necessarily a synchronous operation\r\n  //see: https://stackoverflow.com/questions/41043419/reactjs-onclick-state-change-one-step-behind\r\n  //I solved it by getting the selectedDay variable directly and not depend on the state. Took some time to figure out...!\r\n  /**\r\n   * Handles change in day on dropdown\r\n   * @param {event} e \r\n   */\r\n  handleChangeDay(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n\r\n    let selectedDay = e.target.value //note that this is not the state, because the state is not set so we can not depend on it when accessing the database\r\n\r\n    let prevTimeOptions = [];\r\n    \r\n            //get times from database\r\n            database.ref(this.props.state.festival).child('program').child(selectedDay).child(\"slots\").on('child_added', snap => {\r\n                var vals = snap.val();\r\n                console.log(vals.start, \"-\", vals.end)\r\n          \r\n                prevTimeOptions.push(\r\n                  <option value={snap.key} key={snap.key}>{vals.start}-{vals.end}</option>\r\n                )\r\n\r\n                this.setState({\r\n                  selectedTime: prevTimeOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n                  //Cannot be set outside the callback in case a scene has no timeslot. \r\n                  })\r\n               \r\n            })\r\n            this.setState({\r\n              timeOptions: prevTimeOptions, //must be set outside the snap callback in case a scene has no timeslots.\r\n            })\r\n            \r\n  }\r\n  \r\n\r\n  \r\n  /**\r\n   * See method in bandbooking\r\n   * @param {event} e \r\n   */\r\n  handleSubmitRequest(e) {\r\n    e.preventDefault(); //prevents page from reloading\r\n\r\n    var data = {\r\n      artist: this.state.selectedArtist, //key of artist in firebase\r\n      price: this.state.currentPriceInput,\r\n      scene: this.state.selectedScene,\r\n      date: this.state.selectedDay,\r\n      time: this.state.selectedTime,\r\n      status: \"pending\",\r\n    }\r\n\r\n    //Push requesten inn i databasen\r\n    database.ref(this.props.state.festival).child(\"requests\").push(data)\r\n    database.ref(this.props.state.festival).child(\"artists\").child(this.state.selectedArtist).update({status: \"pending\"});\r\n    console.log(this.state.requests);\r\n  }\r\n\r\n  /**\r\n   * See method in bandbooking\r\n   * @param {request} request \r\n   */\r\n  handleAccept(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).update({status: \"accepted\"});\r\n\r\n    // Kan dette gjøres bedre?\r\n    var previousRequests = this.state.requests;\r\n    previousRequests.map(item => {\r\n      if (item === request) {\r\n        item.status = \"accepted\"\r\n      }\r\n    })\r\n    this.setState({\r\n      requests: previousRequests\r\n    })\r\n  }\r\n\r\n  /**\r\n   * See method in bandbooking\r\n   * @param {request} request \r\n   */\r\n  handleDecline(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).update({status: \"declined\"});\r\n    database.ref(this.props.state.festival).child(\"artists\").child(request.artist).update({status: \"\"});\r\n\r\n    // Kan dette gjøres bedre?\r\n    var previousRequests = this.state.requests;\r\n    previousRequests.map(item => {\r\n      if (item === request) {\r\n        item.status = \"declined\"\r\n      }\r\n    })\r\n    this.setState({\r\n      requests: previousRequests\r\n    })\r\n  }\r\n  \r\n  /**\r\n   * See method in bandbooking\r\n   * @param {request} request \r\n   */\r\n  handleDelete(request) {\r\n    database.ref(this.props.state.festival).child(\"requests\").child(request.key).remove();\r\n    this.setState({\r\n      // Fjerner request fra this.state.requests og rendrer tabellen på nytt. \r\n      // Dermed slipper vi å force page refresh\r\n      requests: this.state.requests.filter(item => item !== request)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * See method in bandbooking\r\n   * @param {event} e \r\n   */\r\n  handleCopyEmail(e) {\r\n    e.preventDefault();\r\n    var copyText = this.state.email;\r\n    copyText.select();\r\n    document.execCommand(\"Copy\");\r\n  }\r\n\r\n  /**\r\n   * See function in bandbooking\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        \r\n        <h3>Send Booking Request</h3>\r\n        <p>* artist already booked for a concert<br></br>\r\n          ** artist declined a previous offer to play\r\n        </p>\r\n     \r\n\r\n        <form>\r\n          \r\n          <select name=\"selectedArtist\" onChange={this.handleChange} value={this.state.selectedArtist}>\r\n            {this.state.artistOptions}\r\n          </select>\r\n          <input name=\"currentPriceInput\" type=\"number\" value={this.state.currentPriceInput} onChange={this.handleChange} placeholder=\"Price offer\" />\r\n          <select name=\"selectedScene\" value={this.state.selectedScene} onChange={this.handleChange}>\r\n              {this.state.sceneOptions}\r\n          </select>\r\n          <select name=\"selectedDay\" value={this.state.selectedDay} onChange={this.handleChangeDay}>\r\n              {this.state.dayOptions}\r\n          </select>\r\n          <select name=\"selectedTime\" value={this.state.selectedTime} onChange={this.handleChange} >\r\n              {this.state.timeOptions}\r\n          </select>\r\n          <button onClick={this.handleSubmitRequest}>Submit</button>\r\n        </form>\r\n\r\n        {/*Liste med requests til Bookingsjef som kan godkjennes, eller ikke godkjennes.*/}\r\n        <div className=\"requestsBody\">\r\n\r\n        <h2>Active Bookings</h2>\r\n\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Price</th>\r\n                  <th>Scene</th>\r\n                  <th>Date</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.requests.map((request) => {\r\n                if (request.status === \"pending\") {\r\n                    return(\r\n                    <tr className=\"pendingRequests\">\r\n                      <td>{this.state.artistMap.get(request.artist)}</td>\r\n                      <td>{request.price}</td>\r\n                      <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                      <td>{this.state.dateMap.get(request.date)} \r\n                          {\" \"}\r\n                          ({this.state.timeMap.get(request.time)})\r\n                      </td>\r\n                      <td>{request.status}</td>\r\n                    </tr>\r\n                    )\r\n                  }\r\n                if (request.status === \"accepted\") {\r\n                  return(\r\n                  <tr className=\"acceptedRequests\">\r\n                   <td>{this.state.artistMap.get(request.artist)}</td>\r\n                   <td>{request.price}</td>\r\n                   <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                   <td>{this.state.dateMap.get(request.date)} \r\n                       {\" \"}\r\n                       ({this.state.timeMap.get(request.time)})\r\n                   </td>\r\n                   <td>{request.status}</td>\r\n                   \r\n                 </tr>\r\n                 )\r\n                }\r\n              })\r\n\r\n              }\r\n            </tbody>\r\n          </table>\r\n        \r\n\r\n          <h2>Declined Requests</h2>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Price</th>\r\n                  <th>Scene</th>\r\n                  <th>Date</th>\r\n                  <th>Status</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"declinedRequests\">\r\n              {this.state.requests.map((request) => {\r\n                if (request.status === \"declined\") {\r\n                    return(\r\n                    <tr>\r\n                      <td>{this.state.artistMap.get(request.artist)}</td>\r\n                      <td>{request.price}</td>\r\n                      <td>{this.state.sceneMap.get(request.scene)}</td>\r\n                      <td>{this.state.dateMap.get(request.date)} \r\n                          {\" \"}\r\n                          ({this.state.timeMap.get(request.time)})\r\n                      </td>\r\n                      <td>{request.status}</td>\r\n                      <td><button onClick={() =>this.handleDelete(request)}> Delete </button></td>\r\n                    </tr>\r\n                    )\r\n                  }\r\n                })\r\n\r\n              }\r\n            </tbody>\r\n          </table>\r\n\r\n          {/*For senere om en skal legge til email funksjon.\r\n          <div>\r\n          <h1> Generated email: </h1>\r\n          <textarea name=\"email\" value={this.state.email} onChange={this.handleChange} rows=\"10\" cols=\"60\"></textarea>\r\n          <button onClick={this.handleCopyEmail}>Copy Email</button>\r\n          </div> */}\r\n\r\n        </div>\r\n      </div>\r\n      \r\n    );\r\n    }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/bandbookingresponsible/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "class",
    "name": "BandBookingResponsible",
    "memberof": "src/pages/bandbookingresponsible/index.js",
    "static": true,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/bandbookingresponsible/index.js",
    "importStyle": "BandBookingResponsible",
    "description": "Slightly modified BandBooking, used to hide some controls from Booking Responsible",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 248,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"artists\": *, \"artistOptions\": *, \"selectedArtist\": *, \"artistMap\": *, \"currentArtistNameInput\": *, \"currentPriceInput\": *, \"sceneOptions\": *, \"selectedScene\": *, \"dayOptions\": *, \"selectedDay\": *, \"timeOptions\": *, \"selectedTime\": *, \"sceneMap\": *, \"dateMap\": *, \"timeMap\": *, \"requests\": *, \"currentArtistAccepted\": string, \"currentPriceAccepted\": *, \"currentConcertDayAccepted\": string, \"email\": string}"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#componentWillMount",
    "access": "public",
    "description": "Pulls required information from the database",
    "lineNumber": 65,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#componentDidMount",
    "access": "public",
    "description": "Gets times from database based on selected festival and day",
    "lineNumber": 201,
    "params": [],
    "return": null
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleChange",
    "access": "public",
    "description": "Keeps the state updated",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "handleChangeDay",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleChangeDay",
    "access": "public",
    "description": "Handles change in day on dropdown",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "handleSubmitRequest",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleSubmitRequest",
    "access": "public",
    "description": "See method in bandbooking",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "handleAccept",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleAccept",
    "access": "public",
    "description": "See method in bandbooking",
    "lineNumber": 298,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "handleDecline",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleDecline",
    "access": "public",
    "description": "See method in bandbooking",
    "lineNumber": 317,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "handleDelete",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleDelete",
    "access": "public",
    "description": "See method in bandbooking",
    "lineNumber": 337,
    "params": [
      {
        "nullable": null,
        "types": [
          "request"
        ],
        "spread": false,
        "optional": false,
        "name": "request",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "handleCopyEmail",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#handleCopyEmail",
    "access": "public",
    "description": "See method in bandbooking",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/bandbookingresponsible/index.js~BandBookingResponsible#render",
    "access": "public",
    "description": "See function in bandbooking",
    "lineNumber": 360,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "file",
    "name": "src/pages/banddatabase/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport Concert from '../../components/concert/Concert'\r\n\r\nimport './style.css';\r\n\r\nimport database from '../../database';\r\n\r\nimport defaultArtistPic from '../../static/img/defaultArtistPic.jpg';\r\n\r\n\r\n/**\r\n * Component used to render BandDatabase page\r\n */\r\nexport default class BandDatabase extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      concerts: [],\r\n      scenes: [],\r\n      genres: [],\r\n      genreOptions: [],\r\n      selectedGenre: \"All Genres\",\r\n\r\n      // Search\r\n      currentSearchInput: \"\",\r\n    }\r\n\r\n    this.handleSearch = this.handleSearch.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Handles change in search, keeping state updated with the field\r\n   * @param {event} e \r\n   */\r\n  handleSearch(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      currentSearchInput: e.target.value\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Keeps the state updated\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    e.preventDefault();\r\n    this.setState({\r\n      selectedGenre: e.target.value,\r\n    })\r\n    \r\n  }\r\n\r\n  /**\r\n   * Pulls information from database\r\n   */\r\n  componentWillMount() {\r\n    // Tar vare på current state\r\n    var previousGenreOptions = this.state.genreOptions;\r\n    var previousGenres = this.state.genres;\r\n    var previousConcerts = this.state.concerts;\r\n    var previousSceneMap = this.state.sceneMap;\r\n    var previousScenes = this.state.scenes;\r\n    var previousSceneOptions = this.state.sceneOptions;\r\n\r\n\r\n    // Gå gjennom hele databasen\r\n    database.ref().once('value', snapshot => {\r\n      snapshot.forEach(festivalSnapshot => {\r\n\r\n        if (festivalSnapshot.key.startsWith(\"-\")) {\r\n          // For hver konsert\r\n          festivalSnapshot.child('concerts').forEach(concertSnapshot => {\r\n            var concertVals = concertSnapshot.val();\r\n            \r\n            // Hent Scene etter key\r\n            festivalSnapshot.ref.child(\"scenes\").child(concertSnapshot.val().scene).once(\"value\", foundScene => {\r\n              if (foundScene.exists()) {\r\n                var sceneName = foundScene.val().name;\r\n                var sceneCapacity = foundScene.val().capacity;\r\n                var genre = concertSnapshot.val().genres.split(\",\")[0]\r\n  \r\n                concertVals[\"sceneName\"] = sceneName;\r\n                concertVals[\"sceneCapacity\"] = sceneCapacity;\r\n                concertVals[\"genre\"] = genre;\r\n              }\r\n              \r\n              concertVals[\"festivalName\"] = festivalSnapshot.val().name;\r\n              // Tar vare på alle sjangre man finner\r\n              if (!previousGenres.includes(genre)) {\r\n                previousGenreOptions.push(\r\n                  <option id=\"dropdownItem\" value={genre} onClick={this.handleChange} key={concertSnapshot.key}> {genre} </option>\r\n                )\r\n                previousGenres.push(genre)\r\n              }\r\n            })\r\n            .then(() => {\r\n              festivalSnapshot.ref.child(\"program\").child(concertSnapshot.val().date).once(\"value\", programSnap => {\r\n                programSnap.ref.child(\"slots\").child(concertSnapshot.val().time).once(\"value\", slotSnap => {\r\n                  if (slotSnap.exists()) {\r\n                    concertVals[\"startTime\"] = slotSnap.val().start\r\n                    concertVals[\"endTime\"] = slotSnap.val().end\r\n                    concertVals[\"dateVal\"] = programSnap.val().date\r\n                  }\r\n                })\r\n              \r\n              })\r\n            })\r\n\r\n            previousConcerts.push(concertVals);\r\n          })\r\n        }\r\n      })\r\n    })\r\n    .then(() => {\r\n      this.setState({\r\n        genreOptions: previousGenreOptions,\r\n        genres: previousGenres,\r\n        concerts: previousConcerts,\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the banddatabase page\r\n   */\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"container\">\r\n\r\n        <section className=\"jumbotron text-center\">\r\n          <div className=\"container\">\r\n            <h1 className=\"jumbotron-heading\">Concert Database</h1>\r\n            <p className=\"lead text-muted\">all concerts from all festivals</p>\r\n            <p>\r\n              <input type=\"text\" class=\"form-control\" value={this.state.currentSearchInput} onChange={this.handleSearch} placeholder=\"Search for Artist...\" aria-label=\"Search for...\"/>\r\n            </p>\r\n            <div id=\"concertDatabaseDrop\" className=\"dropdown\">\r\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n              {this.state.selectedGenre}\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n              <option id=\"dropdownItem\" onClick={this.handleChange} value={\"All Genres\"}  key=\"ShowAll\"> All Genres </option>\r\n              {this.state.genreOptions}\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        \r\n\r\n        <div id=\"accordion\" role=\"tablist\">\r\n        {\r\n          this.state.concerts.map((concert, concertNum) => {\r\n            let match = false;\r\n\r\n              // Hvis valgt er Show All så \"matcher\" alle\r\n              if (this.state.selectedGenre === \"All Genres\") {\r\n\r\n                if (this.state.currentSearchInput === \"\") {\r\n                  match = true\r\n                }\r\n\r\n                else if (concert.name.toLowerCase().search(this.state.currentSearchInput.toLowerCase()) !== -1) {\r\n                  match = true\r\n                }\r\n              }\r\n\r\n              // Hvis ikke Show All, matcher valgt sjanger og konsertens sjanger?\r\n              // Og matcher søket og navnet?\r\n              else if (this.state.selectedGenre == concert.genre) {\r\n                if (this.state.currentSearchInput === \"\") {\r\n                  match = true\r\n                }\r\n\r\n                else if (concert.name.toLowerCase().search(this.state.currentSearchInput.toLowerCase()) !== -1) {\r\n                  match = true\r\n                }\r\n              }\r\n\r\n              if (match) {\r\n                return (\r\n                <div className=\"card\" key={concert.key}>\r\n                  <div className=\"card-header\" role=\"tab\" id={\"heading\"+concertNum}>\r\n                    <h5 className=\"mb-0\">\r\n                      <a data-toggle=\"collapse\" href={\"#collapse\"+concertNum} aria-expanded=\"false\" aria-controls={\"collapse\"+concertNum}>\r\n                        <span>\r\n                          <p> {concert.festivalName} - {concert.dateVal} </p>\r\n                          <p> {concert.name} </p>\r\n                          <p>  </p>  \r\n                        </span>\r\n                        \r\n                      </a>\r\n                    </h5>\r\n                  </div>\r\n              \r\n                  <div id={\"collapse\"+concertNum} className=\"collapse\" role=\"tabpanel\" aria-labelledby={\"heading\"+concertNum}>\r\n                    <div className=\"card-body\">\r\n                      <h6>{concert.day}</h6>\r\n                      <img src={concert.pic ? concert.pic : defaultArtistPic} className=\"rounded float-left\" alt=\"Bilde av artist\"/>\r\n                      <div className=\"float-center\">\r\n                        <br></br>\r\n                        <h6> Genres: {concert.genres} </h6>\r\n                        <h6> Scene: {concert.sceneName} </h6>\r\n                        <h6> Scene Capacity: {concert.sceneCapacity} </h6>\r\n                        <h6> Technical Requirements : {concert.requirements ? concert.requirements : \"None\"} </h6>\r\n                        <h6> Rider: {concert.rider ? concert.rider : \"None\"} </h6>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )\r\n            }\r\n          })\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/banddatabase/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 267,
    "kind": "class",
    "name": "BandDatabase",
    "memberof": "src/pages/banddatabase/index.js",
    "static": true,
    "longname": "src/pages/banddatabase/index.js~BandDatabase",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/banddatabase/index.js",
    "importStyle": "BandDatabase",
    "description": "Component used to render BandDatabase page",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 268,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"concerts\": *, \"scenes\": *, \"genres\": *, \"genreOptions\": *, \"selectedGenre\": string, \"currentSearchInput\": *}"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "method",
    "name": "handleSearch",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#handleSearch",
    "access": "public",
    "description": "Handles change in search, keeping state updated with the field",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 273,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#handleChange",
    "access": "public",
    "description": "Keeps the state updated",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#componentWillMount",
    "access": "public",
    "description": "Pulls information from database",
    "lineNumber": 62,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/banddatabase/index.js~BandDatabase",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/banddatabase/index.js~BandDatabase#render",
    "access": "public",
    "description": "Renders the banddatabase page",
    "lineNumber": 132,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/pages/concertpage/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport template from '../../static/img/defaultArtistPic.jpg'\r\n\r\n//firebase\r\nimport database from '../../database'\r\n\r\n/**\r\n * Component used to render the concerts page \r\n */\r\nexport default class ConcertPage extends Component {\r\n  \r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      concerts: [],\r\n      opts: [],\r\n      selectedTech: \"showAll\",\r\n      selectedTechName: \"All Concerts\",\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n  }\r\n\r\n  /**\r\n   * Pulls information from database\r\n   */\r\n  componentWillMount() {\r\n    var previousConcerts = this.state.concerts;\r\n    var previousOpts = this.state.opts;\r\n    var previousSelectedTech = this.state.selectedTech;\r\n    \r\n    // Spagetti-kode\r\n    database.ref(this.props.state.festival).child('concerts').orderByChild('day').on('child_added', concertSnapshot => {\r\n      database.ref(this.props.state.festival).child(\"scenes\").orderByKey().equalTo(concertSnapshot.val().scene).once(\"value\", foundScenes => {\r\n        \r\n        //.equalTo returnerer en samling av dataSnapshots, enkleste måten er å kjøre child på den\r\n        // og keyen til childen vi er ute etter er keyen som ligger i concertSnapshotet\r\n        var sceneName = foundScenes.child(concertSnapshot.val().scene).val().name;\r\n        var sceneCapacity = foundScenes.child(concertSnapshot.val().scene).val().capacity;\r\n        \r\n\r\n        var vals = concertSnapshot.val();\r\n        var prevTechnicianNames = [];\r\n        concertSnapshot.child('technicians').forEach((technician) => {\r\n          prevTechnicianNames.push(technician.val().name)\r\n        })\r\n        previousConcerts.push({\r\n          name: vals.name,\r\n          genres: vals.genres,\r\n          price: vals.price,\r\n          day: vals.day,\r\n          key: concertSnapshot.key,\r\n          technicians: vals.technicians,\r\n          technicianNames: prevTechnicianNames,\r\n          requirements: vals.requirements,\r\n          pic: vals.pic,\r\n          rider: vals.rider,\r\n          sceneName: sceneName,\r\n          sceneCapacity: sceneCapacity,\r\n        })\r\n      this.setState({\r\n        concerts: previousConcerts,\r\n        selectedTech: previousSelectedTech,\r\n        technicianNames: prevTechnicianNames,\r\n      })\r\n    })\r\n\r\n    database.ref(this.props.state.festival).child('technicians').orderByChild('ID').on('child_added', technicianSnapshot => {\r\n      previousOpts.push(\r\n        <option id=\"dropdownItem\" onClick={this.handleChange} key={technicianSnapshot.key} value={technicianSnapshot.key+\":\"+technicianSnapshot.val().name}> {technicianSnapshot.val().name} </option>\r\n      )\r\n      this.setState({        \r\n        opts: previousOpts,\r\n      })\r\n    })\r\n  })\r\n}\r\n\r\n  /**\r\n   * Keeps state synced to fields\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      selectedTech: e.target.value.split(\":\")[0],\r\n      selectedTechName: e.target.value.split(\":\")[1],\r\n    })\r\n    console.log(\"Selected tech set to: \" + e.target.value)\r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n\r\n        <section className=\"jumbotron text-center\">\r\n          <div className=\"container\">\r\n            <h1 className=\"jumbotron-heading\">Concerts</h1>\r\n            <p className=\"lead text-muted\">Filter concerts by technician</p>\r\n            <div className=\"dropdown\">\r\n            <button className=\"btn btn-secondary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n              {this.state.selectedTechName}\r\n            </button>\r\n            <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenuButton\">\r\n              <option id=\"dropdownItem\" onClick={this.handleChange} value={\"showAll:All Concerts\"} key={\"showAll\"}> All Concerts </option>\r\n              {this.state.opts}\r\n            </div>\r\n            </div>\r\n          </div>\r\n        </section>    \r\n\r\n\r\n\r\n\r\n        <div id=\"accordion\" role=\"tablist\">\r\n          {\r\n            this.state.concerts.map((concert, concertNum) => {\r\n              let match = false;\r\n              \r\n              // Sjekk om alle skal vises\r\n              if (this.state.selectedTech === \"showAll\") {\r\n                match = true;\r\n              }\r\n\r\n              // Hvis ikke, sjekk om konserten har noen teknikere på seg\r\n              else if (concert.technicians !== undefined) {\r\n                if (concert.technicians[this.state.selectedTech] !== undefined) {\r\n                  match = true;\r\n                }\r\n\r\n              }\r\n\r\n              if (match) {\r\n                return (\r\n                <div className=\"card\" key={concert.key}>\r\n                  <div className=\"card-header\" role=\"tab\" id={\"heading\"+concertNum}>\r\n                    <h5 className=\"mb-0\">\r\n                      <a data-toggle=\"collapse\" href={\"#collapse\"+concertNum} aria-expanded=\"false\" aria-controls={\"collapse\"+concertNum}>\r\n                        {concert.name}\r\n                      </a>\r\n                    </h5>\r\n                  </div>\r\n              \r\n                  <div id={\"collapse\"+concertNum} className=\"collapse\" role=\"tabpanel\" aria-labelledby={\"heading\"+concertNum}>\r\n                    <div className=\"card-body\">\r\n                      <h6>{concert.day}</h6>\r\n                      <img src={concert.pic ? concert.pic : template} className=\"rounded float-left\" alt=\"Bilde av artist\"/>\r\n                      <div className=\"float-center\">\r\n                        <br></br>\r\n                        <h6> Genres: {concert.genres} </h6>\r\n                        <h6> Scene: {concert.sceneName} </h6>\r\n                        <h6> Scene Capacity: {concert.sceneCapacity} </h6>\r\n                        <h6> Technical Requirements : {concert.requirements ? concert.requirements : \"None\"} </h6>\r\n                        <h6> Rider: {concert.rider ? concert.rider : \"None\"} </h6>\r\n                      </div>\r\n                      <ul className=\"list-group list-group-flush float-right\">\r\n                        <h6> Technicians on this concert </h6>\r\n                        {\r\n                          concert.technicianNames.map(tech => {\r\n                            console.log(\"Tech\", tech)\r\n                            return (\r\n                              <li className=\"list-group-item\"> {tech} </li>\r\n                            )\r\n                          })\r\n                        }\r\n                      </ul>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              )\r\n            }\r\n          })\r\n        }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/concertpage/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "class",
    "name": "ConcertPage",
    "memberof": "src/pages/concertpage/index.js",
    "static": true,
    "longname": "src/pages/concertpage/index.js~ConcertPage",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/concertpage/index.js",
    "importStyle": "ConcertPage",
    "description": "Component used to render the concerts page ",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 278,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/concertpage/index.js~ConcertPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/concertpage/index.js~ConcertPage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/concertpage/index.js~ConcertPage",
    "static": false,
    "longname": "src/pages/concertpage/index.js~ConcertPage#state",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"concerts\": *, \"opts\": *, \"selectedTech\": string, \"selectedTechName\": string}"
      ]
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/concertpage/index.js~ConcertPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/concertpage/index.js~ConcertPage#componentWillMount",
    "access": "public",
    "description": "Pulls information from database",
    "lineNumber": 31,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/concertpage/index.js~ConcertPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/concertpage/index.js~ConcertPage#handleChange",
    "access": "public",
    "description": "Keeps state synced to fields",
    "lineNumber": 87,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/concertpage/index.js~ConcertPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/concertpage/index.js~ConcertPage#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 98,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "file",
    "name": "src/pages/frontpage/index.js",
    "content": "import React, { Component } from 'react';\r\nimport './frontpage.css';\r\n\r\nimport Festival from '../../components/festival/Festival'\r\nimport AllFestivals from '../../components/allfestivals/AllFestivals'\r\nimport CreateFestival from '../../components/createfestival/CreateFestival'\r\n\r\nimport database from '../../database'\r\n\r\n/**\r\n * Component used to render the Front Page\r\n */\r\nexport default class FrontPage extends Component {\r\n\r\n   constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedFestival:\"\"\r\n        }\r\n        this.enter = this.enter.bind(this)\r\n        this.create = this.create.bind(this)\r\n    }\r\n\r\n    /**\r\n     * Passes the festival key and name to the enter function one layer up\r\n     * @param {firebase.database.Reference.key} festival \r\n     * @param {String} name \r\n     */\r\n    enter(festival,name){\r\n      this.props.enter(festival,name)\r\n    }\r\n\r\n    /**\r\n     * Creates a new festival in the database\r\n     * @param {String} name \r\n     */\r\n    create(name){\r\n      database.ref().push( //creating the strucuture of the database.\r\n        {name:name})\r\n    }\r\n\r\n  \r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n    return (\r\n    <div className=\"App\">\r\n     \r\n    \r\n      <CreateFestival create={this.create}/>\r\n      \r\n      <AllFestivals enter={this.enter}/>\r\n\r\n\r\n     </div>\r\n     )}\r\n\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/frontpage/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 285,
    "kind": "class",
    "name": "FrontPage",
    "memberof": "src/pages/frontpage/index.js",
    "static": true,
    "longname": "src/pages/frontpage/index.js~FrontPage",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/frontpage/index.js",
    "importStyle": "FrontPage",
    "description": "Component used to render the Front Page",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/frontpage/index.js~FrontPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/frontpage/index.js~FrontPage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/frontpage/index.js~FrontPage",
    "static": false,
    "longname": "src/pages/frontpage/index.js~FrontPage#state",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "{\"selectedFestival\": *}"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "enter",
    "memberof": "src/pages/frontpage/index.js~FrontPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/frontpage/index.js~FrontPage#enter",
    "access": "public",
    "description": "Passes the festival key and name to the enter function one layer up",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "firebase.database.Reference.key"
        ],
        "spread": false,
        "optional": false,
        "name": "festival",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "create",
    "memberof": "src/pages/frontpage/index.js~FrontPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/frontpage/index.js~FrontPage#create",
    "access": "public",
    "description": "Creates a new festival in the database",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/frontpage/index.js~FrontPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/frontpage/index.js~FrontPage#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 46,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "file",
    "name": "src/pages/homepage/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport ProgramDays from '../../components/programdays/ProgramDays'\r\nimport ProgramSlots from '../../components/programslots/ProgramSlots'\r\n\r\n//firebase\r\nimport database from '../../database'\r\n\r\n// React Router\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n/**\r\n * Component used to render the Home Page\r\n */\r\nexport default class HomePage extends Component {\r\n  // static propTypes = {}\r\n  // static defaultProps = {}\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n   \r\n    this.state = {\r\n      days: [],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pulls the program from the database\r\n   */\r\n  componentWillMount() {\r\n    var prevDays = this.state.days;\r\n    \r\n        database.ref(this.props.state.festival).child('program').on('child_added', snap => {\r\n          var vals = snap.val();\r\n    \r\n          prevDays.push({\r\n            id: snap.key,\r\n            date:vals.date,\r\n          })\r\n    \r\n          this.setState({\r\n            days: prevDays,\r\n          })\r\n        })\r\n\r\n    \r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n\r\n    if (this.state.days.length === 0) {\r\n      return (\r\n        <div id=\"frontPage\">\r\n          <h2>Program</h2>\r\n      \r\n          <p> There is nothing to see here yet! </p>\r\n          <p> Head over to Setup to configure this festival.</p>\r\n        </div>\r\n      )\r\n    }\r\n\r\n\r\n    return (\r\n      <div id=\"frontPage\">\r\n  \r\n        \r\n        <table className=\"programTable\">\r\n          <thead>\r\n                <tr>\r\n                  {this.state.days.map((day) => {\r\n                        return(<ProgramDays date={day.date}/>)\r\n                      })\r\n                  } \r\n                </tr>\r\n          </thead>\r\n          \r\n          <tbody>\r\n            <tr>\r\n                  {this.state.days.map((day) => {\r\n                        return(<td id=\"programRow\"> \r\n                          <ProgramSlots festival={this.props.state.festival} date={day.id}/>\r\n                          </td>  )\r\n                      })\r\n                  } \r\n            </tr>\r\n\r\n\r\n          </tbody>\r\n                    \r\n        </table>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/homepage/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 294,
    "kind": "class",
    "name": "HomePage",
    "memberof": "src/pages/homepage/index.js",
    "static": true,
    "longname": "src/pages/homepage/index.js~HomePage",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/homepage/index.js",
    "importStyle": "HomePage",
    "description": "Component used to render the Home Page",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 295,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/homepage/index.js~HomePage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/homepage/index.js~HomePage#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/homepage/index.js~HomePage",
    "static": false,
    "longname": "src/pages/homepage/index.js~HomePage#state",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{\"days\": *}"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/homepage/index.js~HomePage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/homepage/index.js~HomePage#componentWillMount",
    "access": "public",
    "description": "Pulls the program from the database",
    "lineNumber": 32,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/homepage/index.js~HomePage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/homepage/index.js~HomePage#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 56,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 299,
    "kind": "file",
    "name": "src/pages/login/index.js",
    "content": "import React, { Component } from 'react';\r\nimport './style.css';\r\nimport Artist from '../../components/artist/Artist'\r\nimport Concert from '../../components/concert/Concert'\r\nimport Technician from '../../components/technician/Technician'\r\n\r\n// Firebase\r\nimport database, {firebaseApp} from '../../database';\r\n\r\n// React Router\r\nimport {Redirect} from 'react-router-dom';\r\n\r\n\r\n\r\n\r\n/**\r\n * Unused Component to render the Login page\r\n */\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errorCode: null,\r\n      errorMessage: null,\r\n      \r\n      // Login\r\n      loginOptions: [],\r\n      selectedLogin: \"\",\r\n      user: null,\r\n      redirectToReferrer: false,\r\n\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Pulls the users and useroptions from the database\r\n   */\r\n  componentDidMount() {\r\n    var previousLoginOptions = this.state.loginOptions\r\n    var previousUser = this.state.user\r\n    var previousSelectedLogin = this.state.selectedLogin\r\n\r\n    database.ref('users').once('value', usersSnapshot => {\r\n      usersSnapshot.forEach(userSnapshot => {\r\n        previousLoginOptions.push(\r\n          <option value={userSnapshot.val().email} key={userSnapshot.key}> {userSnapshot.val().displayName} </option> \r\n        )\r\n\r\n        if (! previousSelectedLogin) {\r\n          previousSelectedLogin = userSnapshot.val().email\r\n        }\r\n      })\r\n    }).then(() => {\r\n      this.setState({\r\n        loginOptions: previousLoginOptions,\r\n        selectedLogin: previousSelectedLogin,\r\n        user: previousUser\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Validates email and password\r\n   */\r\n  validateForm() {\r\n    return this.state.email.length > 0 && this.state.password.length > 0;\r\n  }\r\n\r\n  /**\r\n   * Keeps state synced with fields\r\n   */\r\n  handleChange = event => {\r\n    console.log(\"changing\", event.target.name, \"to\", event.target.value)\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Signs up with email and password using firebase Auth\r\n   */\r\n  handleSignup = event => {\r\n    event.preventDefault();\r\n\r\n    firebaseApp.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\r\n    .then(() => {\r\n      this.setState({redirectToReferrer: true})\r\n    })\r\n    .catch(error => {\r\n      this.handleError(error);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Signs in with email and password using firebase Auth\r\n   */\r\n  handleSignin = event => {\r\n    event.preventDefault();\r\n\r\n    firebaseApp.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\r\n    .then(() => {\r\n      console.log(\"Signed In\")\r\n      this.setState({\r\n        errorCode:null, \r\n        errorMessage:null,\r\n        redirectToReferrer: true,\r\n      })\r\n    })\r\n    .catch(error => {\r\n      this.handleError(error);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Signs out from firebase auth\r\n   */\r\n  handleSignout = event => {\r\n    event.preventDefault();\r\n\r\n    firebaseApp.auth().signOut()\r\n    .then(() => {\r\n      console.log(\"Signed Out\")\r\n      this.forceUpdate()\r\n    })\r\n    .catch(error => {\r\n      this.handleError(error);\r\n    }) \r\n  }\r\n  \r\n  /**\r\n   * Handles error. Sets state to reflect error and resets fields\r\n   */\r\n  handleError = error => {\r\n    var errorCode = error.code;\r\n    var errorMessage = error.message;\r\n    console.log(errorCode, errorMessage)\r\n    this.setState({\r\n      errorCode: errorCode,\r\n      errorMessage: errorMessage,\r\n      email: \"\",\r\n      password: \"\",\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Changes user to the selected user, NOTE: Needs the password to be festival\r\n   */\r\n  changeUser = event => {\r\n    event.preventDefault();\r\n\r\n    // Logg inn med epost fra dropdown og passord festival (som er passordet til alle brukere jeg har lagt inn)\r\n    firebaseApp.auth().signInWithEmailAndPassword(this.state.selectedLogin, \"festival\")\r\n    .then((user) => {\r\n      console.log(\"Signed In as\", user)\r\n      this.setState({\r\n        errorCode:null, \r\n        errorMessage:null,\r\n        redirectToReferrer: true,\r\n      })\r\n\r\n    })\r\n    .catch(error => {\r\n      this.handleError(error);\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Handles dropdown action, sets state to reflect chosen field\r\n   */\r\n  handleDropDown = (event, index, value) => {\r\n    this.setState({\r\n      selectedLogin: value\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n    const { from } = this.props.location.state || { from: { pathname: '/' } }\r\n\r\n    if (this.state.redirectToReferrer) {\r\n      return(\r\n        <Redirect to={from.pathname} />\r\n      )\r\n    }\r\n\r\n    var error = \"\"\r\n    // TODO: catch them all\r\n    switch(this.state.errorCode) {\r\n      case \"auth/user-not-found\":\r\n        error = <h3 className=\"Error-message\"> User not found </h3>\r\n        break;\r\n      \r\n      case \"auth/email-already-in-use\":\r\n        error = <h3 className=\"Error-message\"> This email is already in use </h3>\r\n        break; \r\n\r\n      default:\r\n        error = <h3> {this.state.errorCode} </h3>\r\n        break;\r\n    }\r\n\r\n    var redirected = \"\"\r\n    if (from.pathname !== \"/\") {\r\n      redirected = <h3> You don't have access to {from.pathname} </h3>\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <h1 className=\"App-intro\">\r\n          Login/Signup\r\n        </h1>\r\n\r\n        <div>\r\n        {\r\n          error\r\n        }\r\n        {\r\n          redirected\r\n        }\r\n\r\n        <form className=\"form-signin\">\r\n          <h2 className=\"form-header\">Vennligst logg inn</h2>\r\n          <label>\r\n            Email:\r\n            <input name=\"email\" type=\"email\" value={this.state.email} onChange={this.handleChange} />\r\n          </label>\r\n          <label>\r\n            Password:\r\n            <input name=\"password\" type=\"password\" value={this.state.password} onChange={this.handleChange} />\r\n          </label>\r\n          <button onClick={this.handleSignin}>Sign in</button>\r\n          <button onClick={this.handleSignout}>Sign out</button>\r\n          <button onClick={this.handleSignup}>Sign up</button>\r\n        </form>\r\n\r\n        <form>\r\n          <h2> Dropdown to select user </h2>\r\n          \r\n          <select name=\"selectedLogin\" value={this.state.selectedLogin} onChange={this.handleChange} >\r\n            {this.state.loginOptions}\r\n          </select>\r\n\r\n          <button onClick={this.changeUser}>Change to</button>\r\n\r\n        </form>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/login/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 300,
    "kind": "class",
    "name": "Login",
    "memberof": "src/pages/login/index.js",
    "static": true,
    "longname": "src/pages/login/index.js~Login",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/login/index.js",
    "importStyle": "Login",
    "description": "Unused Component to render the Login page",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 301,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/login/index.js~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/login/index.js~Login#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#state",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "{\"email\": *, \"password\": *, \"errorCode\": *, \"errorMessage\": *, \"loginOptions\": *, \"selectedLogin\": *, \"user\": *, \"redirectToReferrer\": *}"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/pages/login/index.js~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/login/index.js~Login#componentDidMount",
    "access": "public",
    "description": "Pulls the users and useroptions from the database",
    "lineNumber": 42,
    "params": [],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "validateForm",
    "memberof": "src/pages/login/index.js~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/login/index.js~Login#validateForm",
    "access": "public",
    "description": "Validates email and password",
    "lineNumber": 69,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "handleChange",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleChange",
    "access": "public",
    "description": "Keeps state synced with fields",
    "lineNumber": 76,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "handleSignup",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleSignup",
    "access": "public",
    "description": "Signs up with email and password using firebase Auth",
    "lineNumber": 86,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "handleSignin",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleSignin",
    "access": "public",
    "description": "Signs in with email and password using firebase Auth",
    "lineNumber": 101,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "handleSignout",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleSignout",
    "access": "public",
    "description": "Signs out from firebase auth",
    "lineNumber": 121,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "handleError",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleError",
    "access": "public",
    "description": "Handles error. Sets state to reflect error and resets fields",
    "lineNumber": 137,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "changeUser",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#changeUser",
    "access": "public",
    "description": "Changes user to the selected user, NOTE: Needs the password to be festival",
    "lineNumber": 152,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "handleDropDown",
    "memberof": "src/pages/login/index.js~Login",
    "static": false,
    "longname": "src/pages/login/index.js~Login#handleDropDown",
    "access": "public",
    "description": "Handles dropdown action, sets state to reflect chosen field",
    "lineNumber": 175,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/login/index.js~Login",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/login/index.js~Login#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 184,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/pages/manager_site/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\n//firebase\r\nimport database from '../../database';\r\n\r\nimport ManageRequest from '../../components/managerequest/ManageRequest'\r\n\r\n/**\r\n * Component used to render the Manager Site\r\n */\r\nexport default class ManagerSite extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let artistMap = new Map();\r\n    let sceneMap = new Map();\r\n    let dateMap = new Map();\r\n    let timeMap = new Map();\r\n\r\n    this.state = {\r\n      requests: [],\r\n      \r\n      artistMap: artistMap,\r\n      sceneMap: sceneMap,\r\n      dateMap:dateMap,\r\n      timeMap:timeMap,\r\n\r\n\r\n    };\r\n    \r\n    this.database = database;\r\n }\r\n\r\n /**\r\n  * Pulls information from database\r\n  */\r\n componentWillMount() {\r\n\r\n  let previousArtistMap = this.state.artistMap; //map to get name of artist from key\r\n  database.ref(this.props.state.festival).child('artists').on('child_added', snap => {\r\n\r\n    previousArtistMap.set(snap.key, snap.val().name);\r\n\r\n    this.setState({\r\n      artistMap: previousArtistMap,\r\n    })\r\n  })\r\n\r\n  //requests from bookingsjef\r\n  var previousRequests = this.state.requests;\r\n  database.ref(this.props.state.festival).child('requests').on('child_added', requestSnapshot => {\r\n    var vals = requestSnapshot.val();\r\n    if (vals.status === \"accepted\") {\r\n      previousRequests.push({\r\n        artist: vals.artist,\r\n        price:vals.price,\r\n        scene: vals.scene,\r\n        date:vals.date,\r\n        time:vals.time,\r\n        status:vals.status,\r\n        key:requestSnapshot.key,\r\n      })\r\n    }\r\n    this.setState({\r\n      requests: previousRequests,\r\n    })\r\n  })\r\n\r\n  database.ref(this.props.state.festival).child('requests').on('child_removed', changedSnapshot => {\r\n    this.setState({\r\n      requests: this.state.requests.filter(item => item.key !== changedSnapshot.key)\r\n    })\r\n  })\r\n\r\n  \r\n  let prevDateMap = this.state.dateMap;\r\n  let prevTimeMap = this.state.timeMap;\r\n    \r\n      //get days from database\r\n      database.ref(this.props.state.festival).child('program').on('child_added', snap => {\r\n          \r\n          //Add the times to the times map to get them by key\r\n            database.ref(this.props.state.festival).child('program').child(snap.key).child(\"slots\").on('child_added', time => {\r\n                  prevTimeMap.set(time.key, time.val().start + \"-\" + time.val().end)\r\n                  this.setState({\r\n                    timeMap: prevTimeMap\r\n                  })\r\n              })\r\n          \r\n          var vals = snap.val();\r\n\r\n          prevDateMap.set(snap.key, vals.date) //map to get dates by key\r\n \r\n          this.setState({\r\n            dateMap: prevDateMap,\r\n          })\r\n      })\r\n  \r\n  \r\n  let prevSceneMap = this.state.sceneMap;\r\n  \r\n    //get scenes from database\r\n    database.ref(this.props.state.festival).child('scenes').on('child_added', snap => {\r\n        var vals = snap.val();\r\n        \r\n        prevSceneMap.set(snap.key, vals.name +\" \"+ \"(\" + vals.capacity + \")\") //map to get name of scene from key\r\n\r\n        this.setState({\r\n          sceneMap: prevSceneMap,\r\n        })\r\n    })\r\n\r\n\r\n }\r\n\r\n/**\r\n * Keeps state synced with fields\r\n * @param {event} e \r\n */\r\nhandleChange(e) {\r\n  this.setState({\r\n      [e.target.name]: e.target.value\r\n    }\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Renders the page\r\n */\r\nrender() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n    <div className = \"managerRequestsBody\">\r\n      <h2>Concert Offers</h2>\r\n\r\n      <table>\r\n              <thead>\r\n                <tr>\r\n                    <th>Artist</th>\r\n                    <th>Price</th>\r\n                    <th>Scene (capacity)</th>\r\n                    <th>Date</th>\r\n                    <th>Technical Requirements</th>\r\n                    <th>Rider</th>\r\n                   \r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"managerRequests\">\r\n                {this.state.requests.map((requests) => {\r\n                  return(<ManageRequest\r\n                    festival={this.props.state.festival}\r\n\r\n                    requestKey={requests.key}\r\n                    artist={requests.artist}\r\n                    scene={requests.scene}\r\n                    name={this.state.artistMap.get(requests.artist)}\r\n                    date={requests.date}\r\n                    time={requests.time}\r\n                    price={requests.price}\r\n                    key={requests.key}\r\n\r\n                    dateDisplay={this.state.dateMap.get(requests.date)}\r\n                    timeDisplay={this.state.timeMap.get(requests.time)}\r\n                    sceneDisplay={this.state.sceneMap.get(requests.scene)}\r\n                    \r\n                    />\r\n                  )\r\n                  })\r\n\r\n                }\r\n              </tbody>\r\n        </table>\r\n    </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/manager_site/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "ManagerSite",
    "memberof": "src/pages/manager_site/index.js",
    "static": true,
    "longname": "src/pages/manager_site/index.js~ManagerSite",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/manager_site/index.js",
    "importStyle": "ManagerSite",
    "description": "Component used to render the Manager Site",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#state",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"requests\": *, \"artistMap\": *, \"sceneMap\": *, \"dateMap\": *, \"timeMap\": *}"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "database",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#database",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#componentWillMount",
    "access": "public",
    "description": "Pulls information from database",
    "lineNumber": 39,
    "params": [],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#handleChange",
    "access": "public",
    "description": "Keeps state synced with fields",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/manager_site/index.js~ManagerSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/manager_site/index.js~ManagerSite#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 136,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "file",
    "name": "src/pages/pricecalculator/index.js",
    "content": "import React, { Component } from 'react';\r\nimport database from '../../database'\r\nimport './style.css';\r\n\r\n/**\r\n * Component used to render the Price Calculator page\r\n */\r\nexport default class PriceCalculator extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    let sceneCost = new Map();\r\n    let sceneCapacity = new Map();\r\n\r\n    this.state = {\r\n      artistCost: 0, //payment to artist for playing \r\n      sceneCost: \"\", //all costs related to rigging and paying staff\r\n      otherCost: 0, //other costs with the concert\r\n      sceneCapacity: \"\",\r\n      ticketSales: \"\", // number of tickets sold\r\n      profitMargin: 0, \r\n\r\n\r\n      sceneOptions: [],\r\n      selectedScene:\"\",\r\n      sceneCost: sceneCost,\r\n      sceneCapacity: sceneCapacity,\r\n    }\r\n\r\n    //bind functions to the component\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.calculatePrice = this.calculatePrice.bind(this);\r\n    this.styleResult = this.styleResult.bind(this);\r\n    this.calculateCapacitySold = this.calculateCapacitySold.bind(this);\r\n    this.calculateTotalCost = this.calculateTotalCost.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Fetches scenes from the database\r\n   */\r\n  componentWillMount(){\r\n    let prevSceneOptions = this.state.sceneOptions;\r\n    let prevSceneCost = this.state.sceneCost;\r\n    let prevSceneCapacity = this.state.sceneCapacity;\r\n    \r\n      //get scenes from database\r\n      database.ref(this.props.state.festival).child('scenes').on('child_added', snap => {\r\n          var vals = snap.val();\r\n          console.log(snap.key)\r\n          \r\n          prevSceneCapacity.set(snap.key, vals.capacity) //map to get name of scene from key\r\n          prevSceneCost.set(snap.key, vals.cost) //map to get name of scene from key\r\n          \r\n          prevSceneOptions.push(\r\n            <option value={snap.key} key={snap.key}> {vals.name} </option>\r\n          )\r\n          this.setState({\r\n            sceneOptions: prevSceneOptions,\r\n            selectedScene: prevSceneOptions[0].key, //sets the dropdown automatically to the first element, in case you don't select before submitting\r\n            sceneCapacity: prevSceneCapacity,\r\n            sceneCost: prevSceneCost,\r\n           \r\n          })\r\n      })\r\n\r\n  }\r\n\r\n    /**\r\n     * Keeps state synced with fields\r\n     * @param {event} e \r\n     */\r\n    handleChange(e) {\r\n   \r\n        this.setState({\r\n          [e.target.name]: e.target.value,\r\n        })\r\n      console.log(e.target.name + \" set to \" + e.target.value)\r\n  \r\n    }\r\n\r\n    /**\r\n     * Calculates percentage of sold capacity\r\n     */\r\n    calculateCapacitySold(){\r\n      let sceneCapacity = parseInt(this.state.sceneCapacity.get(this.state.selectedScene))\r\n      let ticketSales = parseInt(this.state.ticketSales)\r\n      if(ticketSales > sceneCapacity){\r\n        return \"Ticket sales must be within scene capacity\";\r\n      }\r\n      return Math.floor((ticketSales/sceneCapacity)*100) + \" % of capacity\"\r\n    }\r\n\r\n    /**\r\n     * Calculates the total cost of the concert\r\n     */\r\n    calculateTotalCost(){\r\n      let artistCost = parseInt(this.state.artistCost)\r\n      let sceneCost = parseInt(this.state.sceneCost.get(this.state.selectedScene))\r\n      let otherCost = parseInt(this.state.otherCost)\r\n      let totalCost = artistCost + sceneCost + otherCost;\r\n      return totalCost\r\n    }\r\n\r\n    /**\r\n     * Calculates ticket price\r\n     */\r\n    calculatePrice(){\r\n      let sceneCapacity = parseInt(this.state.sceneCapacity.get(this.state.selectedScene))\r\n      let ticketSales = parseInt(this.state.ticketSales)\r\n      let profitMargin = parseInt(this.state.profitMargin)\r\n      \r\n      if(ticketSales > sceneCapacity){\r\n        return \"Ticket sales must be within scene capacity\";\r\n      }\r\n\r\n      let totalCost = this.calculateTotalCost();\r\n      let ticketPrice = Math.floor((totalCost + profitMargin) / ticketSales)\r\n      return ticketPrice +\" NOK\"\r\n      \r\n    }\r\n\r\n    /**\r\n     * Styles the result based on valid ratio between ticket sales and scene capacity\r\n     */\r\n    styleResult(){\r\n      let sceneCapacity = parseInt(this.state.sceneCapacity.get(this.state.selectedScene))\r\n      let ticketSales = parseInt(this.state.ticketSales)\r\n      \r\n      const validStyle = {\r\n        color: 'green',\r\n        fontWeight: 'bold', //have to write camelCase when setting CSS in this way\r\n      }\r\n      const errorStyle = {\r\n        color: 'red',\r\n      }\r\n      if(ticketSales > sceneCapacity){\r\n        return errorStyle;\r\n      }\r\n      return validStyle\r\n    }\r\n\r\n\r\n\r\n    \r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n    let ticketPrice = this.calculatePrice();\r\n    let divStyle = this.styleResult();\r\n    let capacitySold = this.calculateCapacitySold(); \r\n\r\n    return (\r\n      <div className=\"App\">\r\n        \r\n        \r\n        <form id=\"ticketPriceCalculator\">\r\n        <select name=\"selectedScene\" value={this.state.selectedScene} onChange={this.handleChange}>\r\n              {this.state.sceneOptions}\r\n            </select>\r\n            <div style={divStyle}>Capacity: {this.state.sceneCapacity.get(this.state.selectedScene)}</div>\r\n            <div style={divStyle}>Scene Cost: {this.state.sceneCost.get(this.state.selectedScene)}</div>\r\n\r\n          <section> \r\n            <label form=\"ticketPriceCalculator\"> Profit Margin </label>\r\n            <input name=\"profitMargin\" type=\"number\" value={this.state.profitMargin} onChange={this.handleChange}/><br></br>\r\n          </section> \r\n          \r\n          \r\n          <section>  \r\n            <label form=\"ticketPriceCalculator\"> Artist Cost </label>\r\n            <input name=\"artistCost\" type=\"number\" value={this.state.artistCost} onChange={this.handleChange}/> <br></br>\r\n            <label form=\"ticketPriceCalculator\"> Other Cost </label>\r\n            <input name=\"otherCost\" type=\"number\" value={this.state.otherCost} onChange={this.handleChange}/> <br></br>\r\n          </section>\r\n          \r\n          <section>\r\n           <label form=\"ticketPriceCalculator\"> Ticket Sales</label>\r\n            <input name=\"ticketSales\" type=\"number\" value={this.state.ticketSales} onChange={this.handleChange}/><br></br>\r\n            <input name=\"ticketSales\" type=\"range\" min=\"0\" max={this.state.sceneCapacity.get(this.state.selectedScene)} step={this.state.sceneCapacity.get(this.state.selectedScene)/10} value={this.state.ticketSales} onChange={this.handleChange}/>\r\n            <div style={divStyle}>{capacitySold}</div>\r\n          </section>\r\n            <br></br>\r\n            <h4>Ticket Price Estimate</h4>\r\n            <div style={divStyle}>{ticketPrice}</div>\r\n           \r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/pricecalculator/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 322,
    "kind": "class",
    "name": "PriceCalculator",
    "memberof": "src/pages/pricecalculator/index.js",
    "static": true,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/pricecalculator/index.js",
    "importStyle": "PriceCalculator",
    "description": "Component used to render the Price Calculator page",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 323,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"artistCost\": *, \"sceneCost\": *, \"otherCost\": *, \"sceneCapacity\": *, \"ticketSales\": *, \"profitMargin\": *, \"sceneOptions\": *, \"selectedScene\": *}"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#componentWillMount",
    "access": "public",
    "description": "Fetches scenes from the database",
    "lineNumber": 41,
    "params": [],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#handleChange",
    "access": "public",
    "description": "Keeps state synced with fields",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "calculateCapacitySold",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#calculateCapacitySold",
    "access": "public",
    "description": "Calculates percentage of sold capacity",
    "lineNumber": 84,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "calculateTotalCost",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#calculateTotalCost",
    "access": "public",
    "description": "Calculates the total cost of the concert",
    "lineNumber": 96,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "calculatePrice",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#calculatePrice",
    "access": "public",
    "description": "Calculates ticket price",
    "lineNumber": 107,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "styleResult",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#styleResult",
    "access": "public",
    "description": "Styles the result based on valid ratio between ticket sales and scene capacity",
    "lineNumber": 125,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/pricecalculator/index.js~PriceCalculator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pricecalculator/index.js~PriceCalculator#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 148,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 337,
    "kind": "file",
    "name": "src/pages/pr_site/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport ArtistPR from '../../components/artist_pr/ArtistPR';\r\n//firebase\r\nimport database from '../../database';\r\n\r\n/**\r\n * Component used to render the PR Site\r\n */\r\nexport default class PrSite extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      artists: []\r\n\r\n    };\r\n    //this.handleChange = this.handleChange.bind(this);\r\n    //this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.database = database;\r\n }\r\n\r\n /**\r\n  * Fetches artist info from the database based on current festival\r\n  */\r\n componentWillMount() {\r\n   var previousArtists = this.state.artists;\r\n\r\n   database.ref(this.props.state.festival).child('artists').on('child_added', artistSnapshot => {\r\n     var val = artistSnapshot.val();\r\n     previousArtists.push({\r\n       name: val.name,\r\n       contact_info: val.contact_info,\r\n       sales_number: val.sales_number,\r\n     })\r\n     this.setState({\r\n       artists: previousArtists,\r\n     })\r\n   })\r\n\r\n\r\n }\r\n\r\n/**\r\n * Renders the page\r\n */\r\nrender() {\r\n  return (\r\n    <div className=\"App\">\r\n    \r\n    <h1>Artist Info</h1>\r\n    <div className=\"artistBody\">\r\n    {\r\n      this.state.artists.map((artist) => {\r\n        return(\r\n          <ArtistPR name={artist.name} contact_info={artist.contact_info} sales_number={artist.sales_number}/>\r\n        )\r\n      })\r\n    }\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/pr_site/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 338,
    "kind": "class",
    "name": "PrSite",
    "memberof": "src/pages/pr_site/index.js",
    "static": true,
    "longname": "src/pages/pr_site/index.js~PrSite",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/pr_site/index.js",
    "importStyle": "PrSite",
    "description": "Component used to render the PR Site",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 339,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/pr_site/index.js~PrSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pr_site/index.js~PrSite#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/pr_site/index.js~PrSite",
    "static": false,
    "longname": "src/pages/pr_site/index.js~PrSite#state",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "{\"artists\": *}"
      ]
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "database",
    "memberof": "src/pages/pr_site/index.js~PrSite",
    "static": false,
    "longname": "src/pages/pr_site/index.js~PrSite#database",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/pr_site/index.js~PrSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pr_site/index.js~PrSite#componentWillMount",
    "access": "public",
    "description": "Fetches artist info from the database based on current festival",
    "lineNumber": 27,
    "params": [],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/pr_site/index.js~PrSite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/pr_site/index.js~PrSite#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 48,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "file",
    "name": "src/pages/search/index.js",
    "content": "//LASTFM KEY\r\n/* \r\nApplication name:\tFestival App\r\nAPI key:\t4a8a0fe142d2a436d9a80d3e460ec1eb\r\nShared secret:\t66c6a14111b6faf09afe1df9e78df5bc\r\nRegistered to\taasmusta \r\n*/\r\n\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport './style.css';\r\nimport database from '../../database';\r\nimport Artist from '../../components/artist/Artist';\r\n\r\nimport * as SpotifyWebApi from 'spotify-web-api-node';\r\n/* import * as LastfmWebApi from 'lastfmapi'; */\r\nimport * as Lastfm from 'simple-lastfm';\r\n\r\n/**\r\n * Component used to render the Search page\r\n */\r\nexport default class Search extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      currentSearchInput: \"\",\r\n      artists: [],\r\n      hasToken: false,\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    \r\n    \r\n    this.spotifyApi = new SpotifyWebApi({\r\n      redirectUri : 'http://localhost:3000/callback'\r\n    });\r\n\r\n    this.lastfm = new Lastfm({\r\n      api_key: '4a8a0fe142d2a436d9a80d3e460ec1eb',\r\n      api_secret: '66c6a14111b6faf09afe1df9e78df5bc',\r\n      username: 'xxx',\r\n      password: 'xxx',\r\n      authToken: 'xxx' // Optional, you can use this instead of password, where authToken = md5(username + md5(password))\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used to run this.fetchToken() when the page loads\r\n   */\r\n  componentWillMount() {\r\n    this.fetchToken();\r\n  }\r\n  \r\n  /**\r\n   * Fetches Spotify Token from our cloud function in firebase. \r\n   */\r\n  fetchToken() {\r\n    var myHeaders = new Headers();\r\n    var myInit = { method: 'GET',\r\n                   headers: myHeaders,\r\n                   mode: 'cors',\r\n                   cache: 'default' };\r\n    var myRequest = new Request('https://us-central1-festival-180609.cloudfunctions.net/spotifyToken/', myInit);\r\n    fetch(myRequest).then(response => {\r\n      response.json()\r\n      .then(file => {\r\n        console.log(\"Token is\", file[\"token\"]);\r\n        this.spotifyApi.setAccessToken(file[\"token\"]);\r\n        this.setState({hasToken: true});\r\n      })\r\n      .catch(error => {\r\n        console.log(\"An error occured fetching token\", error)\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Keeps state synced with fields and sends new query to Spotify API when it changes \r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    },\r\n    () => {\r\n      if (this.state.currentSearchInput.length > 1 && this.state.hasToken) {\r\n        this.spotifyApi.searchArtists(this.state.currentSearchInput)\r\n        .then(data => {\r\n          var artistsToShow = []\r\n          data.body.artists.items.map(artist => {\r\n            if (artist.popularity > 5 && artist.followers.total > 1000) {\r\n              artistsToShow.push(artist)\r\n            }\r\n          })\r\n          return artistsToShow;\r\n        }, err => {\r\n          console.error(err)\r\n        })\r\n        .then(artistsToShow => {\r\n          this.setState({artists:artistsToShow});\r\n        })\r\n      } else {\r\n        this.setState({artists:[]})\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render(){\r\n    \r\n    return(\r\n      <div className=\"App\">\r\n        \r\n\r\n        <h2> Search for artists on spotify</h2>\r\n\r\n        <form>\r\n          <input disabled={! this.state.hasToken} type=\"text\" placeholder={this.state.hasToken ? \"Artist Name\" : \"Waiting for Spotify Access\"} name=\"currentSearchInput\" value={this.state.currentSearchInput} onChange={this.handleChange}/>\r\n        </form>\r\n\r\n        <div className=\"Artists\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                  <th>Artist</th>\r\n                  <th>Followers</th>\r\n                  <th>Popularity (0-100)</th>\r\n                  <th>Genres</th>\r\n                  <th>Spotify</th>\r\n                  <th>Add to database</th>\r\n              </tr>\r\n            </thead>\r\n            {\r\n              this.state.artists.map(artist => {\r\n                var url = \"\"\r\n\r\n                try {\r\n                  if (artist.images[0].url) {\r\n                    url = artist.images[0].url\r\n                  }\r\n                 } catch (TypeError) {\r\n                  console.log(\"Can't read property url of undefined\")\r\n                }\r\n                \r\n                return (\r\n                  <Artist festival={this.props.state.festival} name={artist.name} popularity={artist.popularity} followers={artist.followers.total} genres={artist.genres} uri={artist.uri}\r\n                  pic={url} key={artist.uri}/>\r\n                )\r\n              })\r\n            }\r\n          </table>\r\n        </div>\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/search/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 345,
    "kind": "class",
    "name": "Search",
    "memberof": "src/pages/search/index.js",
    "static": true,
    "longname": "src/pages/search/index.js~Search",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/search/index.js",
    "importStyle": "Search",
    "description": "Component used to render the Search page",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 346,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/search/index.js~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/search/index.js~Search#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/search/index.js~Search",
    "static": false,
    "longname": "src/pages/search/index.js~Search#state",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "{\"currentSearchInput\": *, \"artists\": *, \"hasToken\": *}"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "spotifyApi",
    "memberof": "src/pages/search/index.js~Search",
    "static": false,
    "longname": "src/pages/search/index.js~Search#spotifyApi",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "lastfm",
    "memberof": "src/pages/search/index.js~Search",
    "static": false,
    "longname": "src/pages/search/index.js~Search#lastfm",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/search/index.js~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/search/index.js~Search#componentWillMount",
    "access": "public",
    "description": "Used to run this.fetchToken() when the page loads",
    "lineNumber": 54,
    "params": [],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "fetchToken",
    "memberof": "src/pages/search/index.js~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/search/index.js~Search#fetchToken",
    "access": "public",
    "description": "Fetches Spotify Token from our cloud function in firebase. ",
    "lineNumber": 61,
    "params": [],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/search/index.js~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/search/index.js~Search#handleChange",
    "access": "public",
    "description": "Keeps state synced with fields and sends new query to Spotify API when it changes ",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/search/index.js~Search",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/search/index.js~Search#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 115,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "src/pages/setup/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\nimport './setup.css';\r\n\r\nimport database from '../../database'\r\n\r\nimport CreateScene from '../../components/createscene/CreateScene'\r\nimport CreateDay from '../../components/createday/CreateDay'\r\nimport CreatedDays from '../../components/createddays/CreatedDays'\r\nimport SceneList from '../../components/scenelist/SceneList'\r\n\r\n/**\r\n * Component that renders the Setup page\r\n */\r\nexport default class Setup extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      days: [],\r\n      scenes: [],\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Pulls information from the database\r\n   */\r\n  componentWillMount() {\r\n    var prevDays = this.state.days;\r\n    \r\n    \r\n        database.ref(this.props.state.festival).child('program').on('child_added', snap => {\r\n          var vals = snap.val();\r\n    \r\n          prevDays.push({\r\n            id: snap.key,\r\n            date:vals.date,\r\n          })\r\n    \r\n          this.setState({\r\n            days: prevDays,\r\n          })\r\n        })\r\n\r\n\r\n    var prevScenes = this.state.scenes;\r\n    \r\n        database.ref(this.props.state.festival).child('scenes').on('child_added', snap => {\r\n          var vals = snap.val();\r\n          prevScenes.push({\r\n            id: snap.key,\r\n            name: vals.name,\r\n            capacity: vals.capacity,\r\n            cost: vals.cost,\r\n          })\r\n    \r\n          this.setState({\r\n            scenes: prevScenes,\r\n          })\r\n        })\r\n   \r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n      return(\r\n        <div id=\"setupPage\">\r\n          <h2>Create Scenes</h2>\r\n          <table className=\"setupTable\">\r\n            <thead>\r\n              <tr>\r\n                  <th>Name</th>\r\n                  <th>Capacity</th>\r\n                  <th>Cost</th>\r\n                  <th>Create</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            \r\n            <CreateScene\r\n            festival={this.props.state.festival}/>\r\n\r\n            </tbody>\r\n          </table>\r\n\r\n          <h2>My Scenes</h2>\r\n          <table className=\"setupTable\">\r\n            <thead>\r\n              <tr>\r\n                  <th>Name</th>\r\n                  <th>Capacity</th>\r\n                  <th>Cost</th>\r\n                  \r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {this.state.scenes.map((scene) => {\r\n                  return(<SceneList\r\n                    festival={this.props.state.festival}\r\n                    id={scene.id}\r\n                    name={scene.name}\r\n                    capacity={scene.capacity}\r\n                    cost={scene.cost}\r\n                  />\r\n                  )\r\n                })\r\n                }\r\n\r\n            </tbody>\r\n          </table>\r\n\r\n\r\n          <h2>Add Day</h2>\r\n            <table className=\"setupTable\">\r\n            <CreateDay\r\n              festival={this.props.state.festival}/>\r\n            </table>\r\n          \r\n          <h2>Program</h2>\r\n\r\n                {this.state.days.map((day) => {\r\n                  return(<CreatedDays\r\n                    festival={this.props.state.festival}\r\n                    day={day.date}\r\n                    id={day.id}\r\n                  />\r\n                  )\r\n                })\r\n                }\r\n        \r\n\r\n\r\n        </div>\r\n      )\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/setup/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "Setup",
    "memberof": "src/pages/setup/index.js",
    "static": true,
    "longname": "src/pages/setup/index.js~Setup",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/setup/index.js",
    "importStyle": "Setup",
    "description": "Component that renders the Setup page",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 357,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/setup/index.js~Setup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/setup/index.js~Setup#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/setup/index.js~Setup",
    "static": false,
    "longname": "src/pages/setup/index.js~Setup#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{\"days\": *, \"scenes\": *}"
      ]
    }
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/setup/index.js~Setup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/setup/index.js~Setup#componentWillMount",
    "access": "public",
    "description": "Pulls information from the database",
    "lineNumber": 30,
    "params": [],
    "return": null
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/setup/index.js~Setup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/setup/index.js~Setup#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 69,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 361,
    "kind": "file",
    "name": "src/pages/technicians/index.js",
    "content": "import React, { Component } from 'react';\r\n\r\n\r\nimport './style.css';\r\n\r\nimport Technician from '../../components/technician/Technician'\r\nimport Concert from '../../components/concert/Concert'\r\nimport TechniciansList from '../../components/technicianslist/TechniciansList'\r\n\r\n//Firebase\r\nimport database from '../../database'\r\n//region\r\n/**\r\n * Component that renders the technicians page \r\n */\r\nexport default class Technicians extends Component {\r\n//endregion\r\n  constructor(props) {\r\n    super(props);\r\n    var technicianMap = new Map();\r\n\r\n    this.state = {\r\n      technicians: [],\r\n      concertOptions: [],\r\n      technicianOptions: [],\r\n      selectedConcert: \"\",\r\n      selectedTechnician: \"\",\r\n      technicianMap: technicianMap,\r\n\r\n      // Technician form\r\n      currentTechnicianConcert: \"\",\r\n      currentTechnicianNameInput: \"\",\r\n      currentTechnicianIdInput: \"\",\r\n\r\n      // Concert form\r\n      artists: [],\r\n      currentConcertNameInput: \"\",\r\n      currentConcertGenreInput: \"\",\r\n      currentConcertInput: \"\",\r\n      currentConcertPriceInput: \"\",\r\n      currentConcertContactInfo: \"\",\r\n      currentConcertSalesNumber: \"\",\r\n      currentConcertDayInput: \"\",\r\n\r\n    }\r\n\r\n\r\n\r\n    this.match = \"\";\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.pushTech = this.pushTech.bind(this);\r\n    this.handleSubmitTech = this.handleSubmitTech.bind(this);\r\n    this.searchConcertsFor = this.searchConcertsFor.bind(this);\r\n    this.isTechInConcert = this.isTechInConcert.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Pulls information from the database\r\n   */\r\n  componentWillMount() {\r\n    var previousTechnicians = this.state.technicians;\r\n    var previousConcertOptions = this.state.concertOptions;\r\n    var previousTechnicianOptions = this.state.technicianOptions;\r\n    var previousTechnicianMap = this.state.technicianMap;\r\n    var previousArtists = this.state.artists;\r\n\r\n    // User Form\r\n    var previousUserOptions = this.state.userOptions;\r\n\r\n    var firstConcert = \"\"\r\n    database.ref(this.props.state.festival).child('concerts').on('child_added', concertSnapshot => {\r\n      console.log(concertSnapshot.val().name)\r\n      console.log(concertSnapshot.key)\r\n      previousConcertOptions.push(\r\n        <option label={concertSnapshot.val().name} value={concertSnapshot.key} key={concertSnapshot.key}> {concertSnapshot.val().name} </option>\r\n        \r\n      )\r\n      if (! firstConcert) {\r\n        firstConcert = concertSnapshot.key\r\n      }\r\n    })\r\n\r\n    database.ref(this.props.state.festival).child('technicians').on('child_added', techSnapshot => {\r\n      var val = techSnapshot.val();\r\n      previousTechnicians.push({\r\n        name: val.name,\r\n        id: techSnapshot.key,\r\n      })\r\n      console.log('adding option for', techSnapshot.val().name)\r\n      previousTechnicianOptions.push(\r\n        <option value={techSnapshot.key} key={techSnapshot.key}> {techSnapshot.val().name} </option>\r\n      )\r\n      previousTechnicianMap.set(techSnapshot.key, techSnapshot.val().name)\r\n      this.setState({\r\n        technicians: previousTechnicians,\r\n        concertOptions: previousConcertOptions,\r\n        technicianOptions: previousTechnicianOptions,\r\n        technicianMap: previousTechnicianMap,\r\n        currentTechnicianConcert: \"\",\r\n        currentTechnicianNameInput: \"\",\r\n        currentTechnicianIdInput: \"\",\r\n        selectedTechnician: techSnapshot.key, //set the selected to the one last added to prevent error if none i selected\r\n        selectedConcert: firstConcert// Funket ikke: previousConcertOptions[0].value,\r\n      })\r\n    })\r\n\r\n    // Henter ut artistene i databasen\r\n    database.ref(this.props.state.festival).child('artists').on('child_added', artistSnapShot => {\r\n      var val = artistSnapShot.val();\r\n      previousArtists.push({\r\n        name: val.name,\r\n        id: artistSnapShot.key,\r\n      })\r\n    })\r\n\r\n    //Lytter etter child added på tekniker, altså om tekniker blir lagt til\r\n    // Den nye teknikeren vil ikke vises i dropdown før componenten blir rendered på nytt. Dette for å unngå duplikater.\r\n    database.ref(this.props.state.festival).child('technicians').orderByKey().limitToLast(1).on('child_added', lastTechnician => {\r\n      console.log(lastTechnician.val().name +  \" added\");\r\n      var previousTechnicianMap = this.state.technicianMap;\r\n      previousTechnicianMap.set(parseInt(lastTechnician.key), lastTechnician.val().name)\r\n\r\n      this.setState({\r\n        technicianOptions: previousTechnicianOptions,\r\n        technicianMap: previousTechnicianMap,\r\n      })\r\n    })\r\n\r\n   \r\n  }\r\n\r\n  /**\r\n   * Keeps the state synced with fields\r\n   * @param {event} e \r\n   */\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks if technician is in concert\r\n   */\r\n  isTechInConcert() { \r\n    console.log(\"Running check: is tech already in concert?\");\r\n    console.log(\"Festivalkey:\", this.props.state.festival, \"Selected concert:\", this.state.selectedConcert)\r\n    var isInConcert = false;\r\n    var currentTechKey = this.state.selectedTechnician;\r\n\r\n    // Returnerer en Promise. Når then() kjøres sendes isInConcert gjennom denne Promisen\r\n    return database.ref(this.props.state.festival).child('concerts').child(this.state.selectedConcert).child('technicians').once('value', techSnap => {\r\n      techSnap.forEach(technician => {\r\n        // Hvis denne teknikeren i konserten er den vi ser etter, er den i konserten\r\n        if (technician.key === currentTechKey) {\r\n          isInConcert = true\r\n        }\r\n      })\r\n    })\r\n    // Når databasegreiene er ferdig, returner isInConcert gjennom Promisen\r\n    .then(() => {\r\n      return isInConcert\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Pushes technician into concert\r\n   * @param {event} e \r\n   */\r\n  pushTech(e) {\r\n    e.preventDefault();\r\n\r\n    // Kjør isTechInConcert, denne returnerer en Promise.\r\n    // Promisen vi får tilbake kan vi kalle .then() på. then() kjøres når Promisen blir \"resolved\" altså returnerer noe.\r\n    // Da får man også med variabelen(e) som ble returnert i Promisen.\r\n    this.isTechInConcert()\r\n    .then(isInConcert => {\r\n\r\n     \r\n      if (!isInConcert) {\r\n        database.ref(this.props.state.festival).child('concerts').child(this.state.selectedConcert).child('technicians').child(this.state.selectedTechnician).set({\r\n          name: this.state.technicianMap.get(this.state.selectedTechnician),\r\n        })\r\n\r\n        alert(this.state.technicianMap.get(this.state.selectedTechnician) + \" assigned to work on that concert\")\r\n\r\n      } else {\r\n        alert(this.state.technicianMap.get(this.state.selectedTechnician) + \" is already assigned to that concert\")\r\n        console.log(\"Technician was already in concert\")\r\n      }\r\n    })\r\n  }\r\n\r\n  \r\n\r\n\r\n \r\n  /**\r\n   * Pushes a new technician into the database\r\n   * @param {event} e \r\n   */\r\n  handleSubmitTech(e) {\r\n    e.preventDefault();\r\n\r\n    database.ref(this.props.state.festival).child('technicians').push({\r\n      name: this.state.currentTechnicianNameInput\r\n    })\r\n    this.setState({ //setter input boksen tilbake til tom\r\n      currentTechnicianNameInput: \"\",\r\n    })\r\n  }\r\n\r\n  \r\n\r\n  /**\r\n   * Generic function that searches concert query for value and sets this.match to concert that matches\r\n   * @param {String} query \r\n   * @param {String} value \r\n   */\r\n  searchConcertsFor(query, value) {\r\n    return database.ref(this.props.state.festival).child('concerts').once('value').then(concertsSnapshot => {\r\n      return concertsSnapshot.forEach(concertSnapshot => {\r\n        if (concertSnapshot.val()[query] == value) {\r\n          this.match = concertSnapshot;\r\n          console.log(this.match);\r\n        }\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Renders the page\r\n   */\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <form>\r\n          <h2> Add Technician</h2>\r\n          <input name=\"currentTechnicianNameInput\" type=\"text\" value={this.state.currentTechnicianNameInput} onChange={this.handleChange} placeholder=\"Technician Name\" />\r\n          <button onClick={this.handleSubmitTech}>Add</button>\r\n        </form>\r\n        <br></br>\r\n        \r\n        <table>\r\n          <thead>\r\n                <tr>\r\n                 <th>Technicians</th>\r\n                </tr>\r\n          </thead>\r\n          \r\n          <tbody>\r\n            <tr>\r\n              {this.state.technicians.map((tech) => {\r\n                      return(<TechniciansList\r\n                      name = {tech.name}\r\n                      />)\r\n                  })\r\n              }\r\n            </tr>\r\n\r\n\r\n          </tbody>\r\n        \r\n        </table>\r\n\r\n        <br></br>\r\n        <form>\r\n          <h2>Assign to concert</h2>\r\n          <select name=\"selectedTechnician\" onChange={this.handleChange} value={this.state.selectedTechnician}>\r\n            {this.state.technicianOptions}\r\n          </select>\r\n          <select name=\"selectedConcert\" onChange={this.handleChange} value={this.state.selectedConcert}>\r\n            {this.state.concertOptions}\r\n          </select>\r\n          <button onClick={this.pushTech}>Assign</button>\r\n        </form>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/pages/technicians/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 362,
    "kind": "class",
    "name": "Technicians",
    "memberof": "src/pages/technicians/index.js",
    "static": true,
    "longname": "src/pages/technicians/index.js~Technicians",
    "access": "public",
    "export": true,
    "importPath": "app/src/pages/technicians/index.js",
    "importStyle": "Technicians",
    "description": "Component that renders the technicians page ",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 363,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "state",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#state",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{\"technicians\": *, \"concertOptions\": *, \"technicianOptions\": *, \"selectedConcert\": *, \"selectedTechnician\": *, \"technicianMap\": *, \"currentTechnicianConcert\": *, \"currentTechnicianNameInput\": *, \"currentTechnicianIdInput\": *, \"artists\": *, \"currentConcertNameInput\": *, \"currentConcertGenreInput\": *, \"currentConcertInput\": *, \"currentConcertPriceInput\": *, \"currentConcertContactInfo\": *, \"currentConcertSalesNumber\": *, \"currentConcertDayInput\": *}"
      ]
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "match",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#match",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#componentWillMount",
    "access": "public",
    "description": "Pulls information from the database",
    "lineNumber": 60,
    "params": [],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#handleChange",
    "access": "public",
    "description": "Keeps the state synced with fields",
    "lineNumber": 136,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "isTechInConcert",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#isTechInConcert",
    "access": "public",
    "description": "Checks if technician is in concert",
    "lineNumber": 146,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "pushTech",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#pushTech",
    "access": "public",
    "description": "Pushes technician into concert",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "handleSubmitTech",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#handleSubmitTech",
    "access": "public",
    "description": "Pushes a new technician into the database",
    "lineNumber": 203,
    "params": [
      {
        "nullable": null,
        "types": [
          "event"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "searchConcertsFor",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#searchConcertsFor",
    "access": "public",
    "description": "Generic function that searches concert query for value and sets this.match to concert that matches",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "query",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "render",
    "memberof": "src/pages/technicians/index.js~Technicians",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/pages/technicians/index.js~Technicians#render",
    "access": "public",
    "description": "Renders the page",
    "lineNumber": 235,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "file",
    "name": "src/registerServiceWorker.js",
    "content": "// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\n/**\r\n * Created by create-react-app\r\n */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\n/**\r\n * Created by create-react-app\r\n */\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Created by create-react-app\r\n */\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\n/**\r\n * Created by create-react-app\r\n */\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\n/**\r\n * Created by create-react-app\r\n */\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n",
    "static": true,
    "longname": "C:/Users/Asmund/Desktop/Cleanup-time/it1901/app/src/registerServiceWorker.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 380,
    "kind": "variable",
    "name": "isLocalhost",
    "memberof": "src/registerServiceWorker.js",
    "static": true,
    "longname": "src/registerServiceWorker.js~isLocalhost",
    "access": "public",
    "export": false,
    "importPath": "app/src/registerServiceWorker.js",
    "importStyle": null,
    "description": "Created by create-react-app",
    "lineNumber": 14,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 381,
    "kind": "function",
    "name": "register",
    "memberof": "src/registerServiceWorker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/registerServiceWorker.js~register",
    "access": "public",
    "export": true,
    "importPath": "app/src/registerServiceWorker.js",
    "importStyle": "register",
    "description": "Created by create-react-app",
    "lineNumber": 27,
    "params": [],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "registerValidSW",
    "memberof": "src/registerServiceWorker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/registerServiceWorker.js~registerValidSW",
    "access": "public",
    "export": false,
    "importPath": "app/src/registerServiceWorker.js",
    "importStyle": null,
    "description": "Created by create-react-app",
    "lineNumber": 55,
    "params": [
      {
        "name": "swUrl",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "checkValidServiceWorker",
    "memberof": "src/registerServiceWorker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/registerServiceWorker.js~checkValidServiceWorker",
    "access": "public",
    "export": false,
    "importPath": "app/src/registerServiceWorker.js",
    "importStyle": null,
    "description": "Created by create-react-app",
    "lineNumber": 87,
    "params": [
      {
        "name": "swUrl",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "unregister",
    "memberof": "src/registerServiceWorker.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/registerServiceWorker.js~unregister",
    "access": "public",
    "export": true,
    "importPath": "app/src/registerServiceWorker.js",
    "importStyle": "{unregister}",
    "description": "Created by create-react-app",
    "lineNumber": 117,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# IT 1901 Project - Group 17\r\n \r\nWe built a webapp to manage multiple festivals. <br>\r\nIt's hosted at Firebase, [here!](https://festival-180609.firebaseapp.com/)\r\n \r\n* [Run Locally](#run-locally) – How to run locally. \r\n* [How it's built](#how-it's-built) – What tools were used.\r\n \r\n## Run Locally\r\nYou'll need to have npm installed. One of the easiest ways is to\r\ninstall [Node.js](https://nodejs.org/en/)\r\n \r\n```sh\r\ncd app\r\nnpm install\r\nnpm start\r\n```\r\n \r\nThen, if it doesn't open automatically, open [http://localhost:3000/](http://localhost:3000/) to see the app.<br>\r\n \r\n## How It's Built\r\n\r\n### create-react-app\r\n\r\nTo start off we used a tool (built by developers at Facebook) called create-react-app [github](https://github.com/facebookincubator/create-react-app).\r\nThis skips a lot of configuration which would have slowed down our development. It essentially gives you a huge head start when building\r\nReact apps. It's simply run one command and you're ready to start your React project. One downside to this maight be that we're not very\r\nfamiliar with all the tools used, and while this never really became a problem in our project, it might've caused problems in another.\r\n\r\n### Firebase\r\nFirebase became our entire back-end, providing us with database, hosting and \"back-end logic\".\r\n\r\n#### Database\r\nOne of the biggest reasons for us using Firebase for database is that it's real time. This makes it a perfect match with React which keeps the view up to date with the \"state\" within the React App. So when the database updates, React is immediately notified and updates the view.\r\n\r\n#### Hosting\r\nOur reasoning for using Firebase to host our project (when not using our local webpack dev server) was that it was easy - when already using their database you only have to run a single line to deploy.\r\n\r\n#### Back-end logic\r\nWe needed to contact the Spotify API for some of implementations to work. This was not possible to do from the client side because of security concerns. Our solution became Firebase Cloud functions. Here you can configure different functions to fire on different events - like a database change or a GET-request to a specific URL.\r\n\r\n### File Tree\r\n\r\n#### Code\r\nThese are the essential files, the rest are generated\r\n \r\n```\r\napp\r\n│   .firebaserc\r\n│   .gitignore\r\n│   database.rules.json\r\n│   esdoc.json\r\n│   firebase.json\r\n│   package.json\r\n│   README.md\r\n│   testbranch.txt\r\n│\r\n├───functions\r\n│       index.js\r\n│       package.json\r\n│\r\n├───public\r\n│       favicon.ico\r\n│       favicon2.ico\r\n│       index.html\r\n│       manifest.json\r\n│\r\n└───src\r\n    │   App.css\r\n    │   App.js\r\n    │   App.test.js\r\n    │   database.js\r\n    │   index.css\r\n    │   index.js\r\n    │   registerServiceWorker.js\r\n    │\r\n    ├───components\r\n    │   ├───allfestivals\r\n    │   │       allfestivals.css\r\n    │   │       AllFestivals.js\r\n    │   │\r\n    │   ├───artist\r\n    │   │       artist.css\r\n    │   │       Artist.js\r\n    │   │\r\n    │   ├───artistlist\r\n    │   │       artistlist.css\r\n    │   │       ArtistList.js\r\n    │   │\r\n    │   ├───artist_pr\r\n    │   │       artist.css\r\n    │   │       ArtistPR.js\r\n    │   │\r\n    │   ├───concertprogram\r\n    │   │       concertprogram.css\r\n    │   │       ConcertProgram.js\r\n    │   │\r\n    │   ├───createday\r\n    │   │       createday.css\r\n    │   │       CreateDay.js\r\n    │   │\r\n    │   ├───createddays\r\n    │   │       createddays.css\r\n    │   │       CreatedDays.js\r\n    │   │\r\n    │   ├───createfestival\r\n    │   │       createfestival.css\r\n    │   │       CreateFestival.js\r\n    │   │\r\n    │   ├───createscene\r\n    │   │       createscene.css\r\n    │   │       CreateScene.js\r\n    │   │\r\n    │   ├───festival\r\n    │   │       festival.css\r\n    │   │       Festival.js\r\n    │   │\r\n    │   ├───managerequest\r\n    │   │       managerequest.css\r\n    │   │       ManageRequest.js\r\n    │   │\r\n    │   ├───navbar\r\n    │   │       navbar.css\r\n    │   │       navbar.js\r\n    │   │\r\n    │   ├───programdays\r\n    │   │       programdays.css\r\n    │   │       ProgramDays.js\r\n    │   │\r\n    │   ├───programslots\r\n    │   │       programslots.css\r\n    │   │       ProgramSlots.js\r\n    │   │\r\n    │   ├───scenelist\r\n    │   │       scenelist.css\r\n    │   │       SceneList.js\r\n    │   │\r\n    │   ├───slots\r\n    │   │       slots.css\r\n    │   │       Slots.js\r\n    │   │\r\n    │   └───technicianslist\r\n    │           technicianslist.css\r\n    │           TechniciansList.js\r\n    │\r\n    ├───pages\r\n    │   ├───adminpage\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───artists\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───bandbooking\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───bandbookingresponsible\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───banddatabase\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───concertpage\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───frontpage\r\n    │   │       frontpage.css\r\n    │   │       index.js\r\n    │   │\r\n    │   ├───homepage\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───login\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───manager_site\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───pricecalculator\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───pr_site\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───search\r\n    │   │       index.js\r\n    │   │       style.css\r\n    │   │\r\n    │   ├───setup\r\n    │   │       index.js\r\n    │   │       setup.css\r\n    │   │\r\n    │   └───technicians\r\n    │           index.js\r\n    │           style.css\r\n    │\r\n    └───static\r\n        └───img\r\n                defaultArtistPic.jpg\r\n                festival.png\r\n                logo.svg\r\n                spotify.png\r\n                uka.png\r\n```\r\n\r\n#### Database\r\nAnd this is a snippet to give an idea of how our database is structured\r\n\r\n<img src=\"https://i.imgur.com/iaBXOro.png\" width='600' alt='database structure'>\r\n\r\n",
    "longname": "C:\\Users\\Asmund\\Desktop\\Cleanup-time\\it1901\\app\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"app\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"firebase\": \"^4.4.0\",\n    \"material-ui\": \"^0.19.4\",\n    \"react\": \"^15.6.1\",\n    \"react-bootstrap\": \"^0.31.3\",\n    \"react-dom\": \"^15.6.1\",\n    \"react-router\": \"^4.2.0\",\n    \"react-router-dom\": \"^4.2.2\",\n    \"react-scripts\": \"1.0.13\",\n    \"simple-lastfm\": \"^1.0.5\",\n    \"spotify-web-api-node\": \"^2.5.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\",\n    \"doc\": \"esdoc -c esdoc.json\"\n  },\n  \"devDependencies\": {\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "C:\\Users\\Asmund\\Desktop\\Cleanup-time\\it1901\\app\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]